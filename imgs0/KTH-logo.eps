%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: KTH-logo-new.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Nicol˜ Fabbiane
%%CreationDate: 02/10/14
%%BoundingBox: 0 0 369 369
%%HiResBoundingBox: 0 0 368.5044 368.5039
%%CropBox: 0 0 368.5044 368.5039
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: (PANTONE 2935 CVU)
%%CMYKCustomColor: 
%%RGBCustomColor: 0.1176 0.3373 0.6431 (PANTONE 2935 CVU)
%%EndComments
                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="ï»¿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2014-10-02T15:55:49+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A5/navMuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KvUfy60uHTvJup+cLKyk1LWrYXduhUwGKxVbcOty8cwJYg16dtqZ&#xA;rNVMyyDGTUTXfvvyc3BGoGYFnf4ea38z9Jtbny3pnm24s30vWtQkigntWMPC5jFsHN3GkQ+EFtjX&#xA;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&#xA;xV2KuxV2KuxV2KuxV2KuxV//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>209.999929</stDim:w>
            <stDim:h>296.999959</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 2935 CVU</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>[PassmÃ¤rke]</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Vit</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Vit</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Svart</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 2935 CVU</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>30</xmpG:red>
                           <xmpG:green>86</xmpG:green>
                           <xmpG:blue>164</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -368.504 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 368.504 li
368.504 368.504 li
368.504 0 li
cp
clp
[1 0 0 1 0 0 ]ct
368.504 368.504 mo
0 368.504 li
0 0 li
368.504 0 li
368.504 368.504 li
cp
false sop
/0 
<<
/Name (PANTONE 2935 CVU)
/0 
[/DeviceRGB] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Additive
/TintProc null
/NComponents 3 
/Components [ .117647 .337255 .643137 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
149.381 152.535 mo
149.381 153.662 li
140.801 154.566 134.686 161.67 129.119 167.461 cv
122.705 174.021 li
138.145 191.207 li
145.422 198.645 148.473 202.658 154.598 202.926 cv
154.578 204.076 li
141.967 205.615 138.859 202.295 131.787 194.545 cv
116.438 177.844 li
128.141 165.355 li
136.041 156.477 134.934 154.189 129.893 153.662 cv
129.893 152.535 li
149.381 152.535 li
cp
115.391 191.406 mo
115.617 199.156 115.691 201.414 125.398 202.617 cv
125.398 203.746 li
99.4414 203.746 li
99.4414 202.617 li
108.469 201.414 108.545 199.156 108.77 191.406 cv
108.77 164.922 li
108.545 157.172 108.469 154.916 99.4414 153.711 cv
99.4414 152.584 li
123.367 152.584 li
123.367 153.711 li
115.691 154.916 115.617 157.172 115.391 164.922 cv
115.391 191.406 li
cp
1 1 1 rgb
f
202.979 152.504 mo
203.877 166.32 li
202.823 166.547 li
200.192 157.217 196.053 154.84 187.402 154.84 cv
182.887 154.84 li
182.887 189.602 li
182.887 198.93 183.338 201.414 193.418 202.617 cv
193.418 203.746 li
165.734 203.746 li
165.734 202.617 li
175.814 201.414 176.266 198.93 176.266 189.602 cv
176.266 154.84 li
171.752 154.84 li
163.1 154.84 158.961 157.217 156.328 166.547 cv
155.275 166.32 li
156.149 152.504 li
202.979 152.504 li
cp
f
226.383 191.406 mo
226.383 199.684 226.534 201.188 236.391 202.617 cv
236.391 203.746 li
210.434 203.746 li
210.434 202.617 li
219.461 201.414 219.538 199.156 219.762 191.406 cv
219.762 164.922 li
219.538 157.172 219.461 154.916 210.434 153.711 cv
210.434 152.584 li
236.391 152.584 li
236.391 153.711 li
226.534 155.143 226.383 156.646 226.383 164.922 cv
226.383 175.832 li
254.583 175.832 li
254.583 164.922 li
254.583 156.646 254.432 155.143 244.575 153.711 cv
244.575 152.584 li
270.534 152.584 li
270.534 153.711 li
261.504 154.916 261.43 157.172 261.204 164.922 cv
261.204 191.406 li
261.43 199.156 261.504 201.414 270.534 202.617 cv
270.534 203.746 li
244.575 203.746 li
244.575 202.617 li
254.432 201.188 254.583 199.684 254.583 191.406 cv
254.583 178.992 li
226.383 178.992 li
226.383 191.406 li
cp
f
158.293 320.895 mo
158.293 320.895 163.193 320.846 167.943 325.596 cv
172.694 330.346 181.554 340.889 184.595 343.996 cv
191.342 350.896 196.293 347.996 196.293 347.996 cv
196.293 347.996 191.694 347.697 187.746 343.746 cv
183.845 339.846 172.944 327.195 169.794 324.045 cv
163.894 318.145 158.293 320.895 158.293 320.895 cv
cp
f
169.118 320.895 mo
169.118 320.895 174.019 320.846 178.77 325.596 cv
183.52 330.346 192.377 340.889 195.418 343.996 cv
202.17 350.896 207.12 347.996 207.12 347.996 cv
207.12 347.996 202.518 347.697 198.569 343.746 cv
194.668 339.846 183.77 327.195 180.619 324.045 cv
174.719 318.145 169.118 320.895 169.118 320.895 cv
cp
f
209.696 320.895 mo
209.696 320.895 204.795 320.846 200.043 325.596 cv
195.293 330.346 186.436 340.889 183.395 343.996 cv
176.644 350.896 171.693 347.996 171.693 347.996 cv
171.693 347.996 176.294 347.697 180.244 343.746 cv
184.145 339.846 195.043 327.195 198.194 324.045 cv
204.094 318.145 209.696 320.895 209.696 320.895 cv
cp
f
198.87 320.895 mo
198.87 320.895 193.967 320.846 189.218 325.596 cv
184.47 330.346 175.61 340.889 172.568 343.996 cv
165.818 350.896 160.868 347.996 160.868 347.996 cv
160.868 347.996 165.469 347.697 169.419 343.746 cv
173.319 339.846 184.22 327.195 187.371 324.045 cv
193.268 318.145 198.87 320.895 198.87 320.895 cv
cp
f
2.5562 lw
1 lc
0 lj
4 ml
[] 0 dsh
true sadj
224.1 111.591 mo
211.471 106.911 198.139 104.536 184.473 104.536 cv
183.58 104.536 li
169.912 104.536 156.58 106.911 143.951 111.591 cv
@
101.75 221.566 mo
105.762 221.566 li
110.223 235.066 li
110.269 235.066 li
114.755 221.566 li
118.385 221.566 li
112.074 238.697 li
108.063 238.697 li
101.75 221.566 li
cp
f
123.573 221.566 mo
135.057 221.566 li
135.057 224.416 li
127.252 224.416 li
127.252 228.424 li
134.56 228.424 li
134.56 231.271 li
127.252 231.271 li
127.252 235.85 li
135.319 235.85 li
135.319 238.697 li
123.573 238.697 li
123.573 221.566 li
cp
f
140.482 221.566 mo
154.362 221.566 li
154.362 224.416 li
149.262 224.416 li
149.262 238.697 li
145.583 238.697 li
145.583 224.416 li
140.482 224.416 li
140.482 221.566 li
cp
f
159.571 221.566 mo
171.054 221.566 li
171.054 224.416 li
163.248 224.416 li
163.248 228.424 li
170.557 228.424 li
170.557 231.271 li
163.248 231.271 li
163.248 235.85 li
171.314 235.85 li
171.314 238.697 li
159.571 238.697 li
159.571 221.566 li
cp
f
188.494 238.697 mo
181.732 224.461 li
181.687 224.506 li
181.687 238.697 li
178.245 238.697 li
178.245 221.566 li
183.702 221.566 li
190.224 235.041 li
190.271 234.994 li
190.271 221.566 li
193.711 221.566 li
193.711 238.697 li
188.494 238.697 li
cp
f
209.233 226.451 mo
209.09 224.721 208.163 223.867 206.387 223.867 cv
205.034 223.867 203.659 224.58 203.659 226.076 cv
203.659 227.924 205.319 228.139 206.79 228.494 cv
209.397 229.158 213.245 229.893 213.245 233.334 cv
213.245 237.58 209.542 239.049 205.862 239.049 cv
201.952 239.049 199.17 237.533 199.293 233.217 cv
203.038 233.217 li
202.901 235.115 203.991 236.393 205.913 236.393 cv
207.381 236.393 209.327 235.945 209.327 234.115 cv
209.327 232.1 206.885 231.959 205.417 231.58 cv
203.018 230.982 199.741 229.893 199.741 226.857 cv
199.741 222.943 203.348 221.21 206.862 221.21 cv
210.182 221.21 212.768 223.014 212.768 226.451 cv
209.233 226.451 li
cp
f
222.487 228.971 mo
222.534 228.971 li
228.229 221.566 li
232.526 221.566 li
226.235 229.23 li
233.073 238.697 li
228.491 238.697 li
222.534 229.967 li
222.487 229.967 li
222.487 238.697 li
218.809 238.697 li
218.809 221.566 li
222.487 221.566 li
222.487 228.971 li
cp
f
246.659 232.219 mo
244.307 224.912 li
244.262 224.912 li
241.747 232.219 li
246.659 232.219 li
cp
236.004 238.697 mo
242.194 221.566 li
246.563 221.566 li
252.518 238.697 li
248.817 238.697 li
247.584 235.066 li
240.797 235.066 li
239.514 238.697 li
236.004 238.697 li
cp
f
260.731 229.252 mo
262.772 229.158 265.432 229.869 265.432 226.832 cv
265.432 223.795 262.772 224.506 260.731 224.416 cv
260.731 229.252 li
cp
257.051 238.697 mo
257.051 221.566 li
262.342 221.566 li
266.139 221.589 269.344 222.49 269.344 226.832 cv
269.344 229.943 267.231 231.98 263.411 232.1 cv
260.731 232.1 li
260.731 238.697 li
257.051 238.697 li
cp
f
107.096 258.803 mo
107.096 261.744 107.784 265.064 111.414 265.064 cv
115.045 265.064 115.732 261.744 115.732 258.803 cv
115.732 255.857 115.045 252.537 111.414 252.537 cv
107.784 252.537 107.096 255.857 107.096 258.803 cv
cp
103.18 258.803 mo
103.18 253.75 105.742 249.879 111.414 249.879 cv
117.085 249.879 119.646 253.75 119.646 258.803 cv
119.646 263.854 117.085 267.723 111.414 267.723 cv
105.742 267.723 103.18 263.854 103.18 258.803 cv
cp
f
134.979 255.787 mo
135.001 253.986 133.912 252.537 131.704 252.537 cv
129.094 252.537 128.432 256.406 128.432 258.803 cv
128.432 261.197 129.094 265.064 131.704 265.064 cv
133.912 265.064 135.001 263.615 134.979 261.814 cv
138.894 261.814 li
138.729 266.111 135.645 267.723 131.704 267.723 cv
126.745 267.723 124.516 263.807 124.516 258.803 cv
124.516 253.795 126.745 249.879 131.704 249.879 cv
135.645 249.879 138.729 251.49 138.894 255.787 cv
134.979 255.787 li
cp
f
144.487 267.365 mo
144.487 250.236 li
148.164 250.236 li
148.164 256.998 li
154.642 256.998 li
154.642 250.236 li
158.366 250.236 li
158.366 267.365 li
154.689 267.365 li
154.689 259.844 li
148.164 259.844 li
148.164 267.365 li
144.487 267.365 li
cp
f
177.48 257.639 mo
177.528 257.639 li
183.225 250.236 li
187.52 250.236 li
181.229 257.9 li
188.063 267.365 li
183.484 267.365 li
177.528 258.635 li
177.48 258.635 li
177.48 267.365 li
173.804 267.365 li
173.804 250.236 li
177.48 250.236 li
177.48 257.639 li
cp
f
194.842 258.803 mo
194.842 261.744 195.526 265.064 199.163 265.064 cv
202.793 265.064 203.479 261.744 203.479 258.803 cv
203.479 255.857 202.793 252.537 199.163 252.537 cv
195.526 252.537 194.842 255.857 194.842 258.803 cv
cp
190.931 258.803 mo
190.931 253.75 193.491 249.879 199.163 249.879 cv
204.831 249.879 207.393 253.75 207.393 258.803 cv
207.393 263.854 204.831 267.723 199.163 267.723 cv
193.491 267.723 190.931 263.854 190.931 258.803 cv
cp
f
222.936 267.365 mo
216.17 253.131 li
216.125 253.178 li
216.125 267.365 li
212.688 267.365 li
212.688 250.236 li
218.143 250.236 li
224.667 263.713 li
224.715 263.664 li
224.715 250.236 li
228.155 250.236 li
228.155 267.365 li
222.936 267.365 li
cp
f
243.92 255.123 mo
243.778 253.393 242.85 252.537 241.075 252.537 cv
239.721 252.537 238.346 253.252 238.346 254.744 cv
238.346 256.594 240.006 256.809 241.477 257.164 cv
244.088 257.826 247.932 258.564 247.932 262.006 cv
247.932 266.25 244.229 267.723 240.553 267.723 cv
236.639 267.723 233.858 266.205 233.979 261.885 cv
237.729 261.885 li
237.588 263.783 238.678 265.064 240.6 265.064 cv
242.071 265.064 244.014 264.615 244.014 262.787 cv
244.014 260.771 241.573 260.627 240.104 260.25 cv
237.706 259.654 234.428 258.564 234.428 255.525 cv
234.428 251.613 238.036 249.879 241.549 249.879 cv
244.87 249.879 247.456 251.682 247.456 255.123 cv
243.92 255.123 li
cp
f
252.301 250.236 mo
266.182 250.236 li
266.182 253.084 li
261.084 253.084 li
261.084 267.365 li
257.405 267.365 li
257.405 253.084 li
252.301 253.084 li
252.301 250.236 li
cp
f
197.585 82.2793 mo
197.601 82.3135 197.623 82.3447 197.64 82.3789 cv
197.66 82.3555 197.679 82.334 197.699 82.3105 cv
197.585 82.2793 li
cp
f
244.707 87.8662 mo
243.978 89.7285 241.869 90.6553 240.007 89.9277 cv
239.101 89.5762 238.388 88.8955 237.998 88.0107 cv
237.791 87.541 237.687 87.0439 237.687 86.5459 cv
237.687 86.1006 237.771 85.6533 237.937 85.2246 cv
238.667 83.3633 240.777 82.4375 242.642 83.1611 cv
244.501 83.8867 245.427 85.998 244.707 87.8662 cv
cp
230.218 93.5117 mo
227.509 92.457 225.605 90.2266 224.861 87.6309 cv
222.839 89.4277 220.031 90.2871 217.185 89.7305 cv
214.13 89.1309 212.13 86.1602 212.734 83.1074 cv
212.791 82.8223 213.058 81.7129 213.185 81.3027 cv
213.589 83.4336 215.234 85.2129 217.486 85.6543 cv
220.451 86.2363 223.339 84.293 223.917 81.334 cv
224.501 78.3711 222.558 75.4863 219.595 74.9063 cv
219.283 74.8413 218.938 74.9023 218.609 74.9014 cv
218.703 74.6455 218.81 74.3525 218.81 74.3525 cv
218.938 73.7031 218.938 73.0586 218.838 72.4404 cv
221.543 71.7153 223.544 69.2524 223.544 66.3223 cv
223.544 63.9688 222.251 61.9141 220.341 60.8213 cv
221.925 59.9043 223.007 58.209 223.007 56.25 cv
223.007 53.4976 220.888 51.2554 218.201 51.0034 cv
218.302 50.8589 218.386 50.7041 218.47 50.5488 cv
229.83 54.1699 235.722 59.665 238.414 65.1494 cv
238.556 65.6875 238.771 66.1963 239.074 66.6465 cv
240.189 69.5078 240.49 72.3184 240.294 74.8066 cv
240.457 75.1455 li
240.519 75.8379 240.703 76.4941 240.986 77.0977 cv
240.939 77.1191 240.899 77.1519 240.853 77.1743 cv
240.638 77.2808 240.429 77.3984 240.23 77.5322 cv
240.12 77.606 240.015 77.6865 239.911 77.7681 cv
239.781 77.8696 239.656 77.9775 239.535 78.0918 cv
239.382 78.2329 239.242 78.3833 239.105 78.5425 cv
239.033 78.6284 238.964 78.7168 238.897 78.8076 cv
238.742 79.0146 238.603 79.2334 238.476 79.4653 cv
238.436 79.54 238.398 79.6157 238.361 79.6929 cv
238.297 79.8242 238.217 79.9434 238.164 80.082 cv
238.164 80.082 238.096 80.3755 238.043 80.6411 cv
237.759 80.4648 237.507 80.2324 237.205 80.1162 cv
236.144 79.7031 234.936 79.4463 233.763 79.4888 cv
231.812 79.5527 229.954 80.4419 229.029 82.8164 cv
227.931 85.6309 229.328 88.8105 232.144 89.9063 cv
233.667 90.501 235.287 90.3457 236.632 89.6436 cv
236.857 89.9844 237.109 90.3018 237.398 90.583 cv
236.169 93.292 233.019 94.6045 230.218 93.5117 cv
cp
209.283 76.7227 mo
209.649 74.853 211.399 73.6274 213.262 73.8535 cv
213.763 73.9517 li
215.57 74.4443 216.733 76.2407 216.365 78.1113 cv
215.982 80.0664 214.083 81.3379 212.132 80.957 cv
210.173 80.5742 208.898 78.6797 209.283 76.7227 cv
cp
210.341 82.6387 mo
209.744 85.6914 206.771 87.6895 203.718 87.0898 cv
200.906 86.541 198.843 84.7539 197.64 82.3789 cv
196.005 84.4863 193.675 85.8496 190.803 85.8496 cv
187.692 85.8496 185.163 83.3145 185.163 80.2051 cv
185.163 79.9121 185.217 78.7734 185.252 78.3457 cv
186.067 80.3574 188.022 81.7891 190.321 81.7891 cv
193.341 81.7891 195.798 79.332 195.798 76.3145 cv
195.798 73.293 193.341 70.8359 190.321 70.8359 cv
189.995 70.8359 189.674 70.9595 189.351 71.0215 cv
189.397 70.7529 189.44 70.4482 189.44 70.4482 cv
189.44 69.9673 189.372 69.5029 189.254 69.0581 cv
191.211 67.8516 li
191.211 67.8516 191.008 49.0483 187.683 40.7563 cv
187.745 40.7217 187.804 40.6807 187.866 40.644 cv
214.761 42.2461 212.439 60.9941 209.257 67.5938 cv
210.056 68.9805 li
210.021 69.0078 209.993 69.0435 209.958 69.0718 cv
209.804 69.1978 209.66 69.334 209.521 69.4766 cv
209.417 69.5811 209.32 69.688 209.225 69.8008 cv
209.17 69.8667 209.121 69.938 209.069 70.0068 cv
208.907 70.2192 208.76 70.4414 208.629 70.6782 cv
208.615 70.7051 208.602 70.7334 208.587 70.7603 cv
208.434 71.0522 208.307 71.3594 208.207 71.6836 cv
208.201 71.7007 208.197 71.7188 208.191 71.7358 cv
208.14 71.9072 208.076 72.0713 208.041 72.25 cv
208.041 72.25 208.025 72.5586 208.021 72.832 cv
207.703 72.707 207.408 72.5176 207.078 72.4512 cv
204.115 71.8711 201.23 73.8125 200.652 76.7754 cv
200.072 79.7363 202.005 82.6211 204.974 83.2012 cv
207.23 83.6445 209.421 82.6172 210.607 80.7969 cv
210.56 81.2246 210.398 82.3516 210.341 82.6387 cv
cp
180.394 74.627 mo
180.394 72.6445 181.993 71.0425 183.976 71.0264 cv
184.034 71.0264 li
186.011 71.0425 187.61 72.6445 187.61 74.627 cv
187.61 76.6211 185.995 78.2344 184.005 78.2344 cv
182.009 78.2344 180.394 76.6211 180.394 74.627 cv
cp
177.082 85.8496 mo
174.178 85.8496 171.773 84.4258 170.135 82.2793 cv
168.938 84.7051 166.854 86.5332 164.004 87.0898 cv
160.949 87.6895 157.977 85.6914 157.379 82.6387 cv
157.322 82.3516 157.16 81.2246 157.115 80.7969 cv
158.299 82.6172 160.492 83.6445 162.746 83.2012 cv
165.715 82.6211 167.648 79.7363 167.07 76.7754 cv
166.49 73.8125 163.605 71.8711 160.643 72.4512 cv
160.321 72.5156 160.033 72.6963 159.726 72.8208 cv
159.721 72.5503 159.706 72.249 159.706 72.249 cv
159.443 70.9033 158.704 69.7729 157.701 68.9897 cv
158.507 67.5938 li
155.317 60.9795 152.99 42.165 180.07 40.6328 cv
180.177 40.6963 180.284 40.7607 180.394 40.8193 cv
177.086 49.0967 176.739 67.623 176.739 67.623 cv
178.697 68.8857 li
178.549 69.3818 178.467 69.9053 178.467 70.4492 cv
178.467 70.4492 178.516 70.7578 178.557 71.0273 cv
178.229 70.9668 177.895 70.8359 177.564 70.8359 cv
174.545 70.8359 172.084 73.293 172.084 76.3145 cv
172.084 79.332 174.545 81.7891 177.564 81.7891 cv
179.863 81.7891 181.82 80.3574 182.631 78.3457 cv
182.672 78.7734 182.721 79.9121 182.721 80.2051 cv
182.721 83.3145 180.191 85.8496 177.082 85.8496 cv
cp
151.63 78.1113 mo
151.243 76.1543 152.524 74.2617 154.479 73.877 cv
156.437 73.498 158.331 74.7676 158.71 76.7227 cv
159.097 78.6797 157.819 80.5742 155.864 80.957 cv
153.911 81.3379 152.011 80.0664 151.63 78.1113 cv
cp
150.537 89.7305 mo
147.689 90.2871 144.881 89.4277 142.861 87.6309 cv
142.115 90.2266 140.211 92.457 137.504 93.5117 cv
134.762 94.5811 131.685 93.3496 130.401 90.7568 cv
130.742 90.4551 131.046 90.1182 131.302 89.748 cv
132.335 90.2314 133.511 90.3955 134.675 90.1636 cv
134.788 90.1445 134.906 90.1206 135.03 90.0869 cv
135.038 90.085 135.045 90.0815 135.053 90.0796 cv
135.228 90.0313 135.402 89.9834 135.603 89.9053 cv
138.419 88.8096 139.815 85.6299 138.718 82.8154 cv
137.701 80.2036 135.554 79.3887 133.395 79.4927 cv
132.411 79.5371 131.423 79.7725 130.539 80.1172 cv
130.238 80.2334 129.983 80.4653 129.701 80.6416 cv
129.649 80.3755 129.579 80.0811 129.579 80.0811 cv
129.046 78.7095 128.015 77.6777 126.773 77.1045 cv
127.058 76.5 127.246 75.8408 127.308 75.1455 cv
127.47 74.8066 li
127.275 72.3184 127.576 69.5078 128.69 66.6455 cv
128.993 66.1963 129.207 65.6875 129.349 65.1504 cv
132.041 59.665 137.934 54.1709 149.294 50.5488 cv
149.378 50.7041 149.463 50.8589 149.563 51.0034 cv
146.875 51.2554 144.757 53.4976 144.757 56.25 cv
144.757 58.209 145.837 59.9043 147.422 60.8213 cv
145.512 61.9141 144.22 63.9688 144.22 66.3223 cv
144.22 69.2461 146.211 71.707 148.907 72.4375 cv
148.808 73.0576 148.808 73.7031 148.936 74.3535 cv
148.936 74.3535 149.041 74.6465 149.137 74.9023 cv
148.799 74.9063 148.447 74.8398 148.127 74.9063 cv
145.162 75.4863 143.219 78.3711 143.803 81.334 cv
144.383 84.293 147.27 86.2363 150.234 85.6543 cv
152.486 85.2129 154.133 83.4336 154.537 81.3027 cv
154.662 81.7129 154.932 82.8223 154.986 83.1074 cv
155.59 86.1602 153.59 89.1309 150.537 89.7305 cv
cp
127.991 89.9268 mo
126.126 90.6553 124.017 89.7285 123.286 87.8613 cv
122.566 85.998 123.494 83.8867 125.356 83.1602 cv
127.218 82.4375 129.327 83.3633 130.057 85.2246 cv
130.224 85.6563 130.304 86.1006 130.304 86.5371 cv
130.304 87.9941 129.424 89.3711 127.991 89.9268 cv
cp
121.438 70.7148 mo
123.587 70.7148 125.335 72.4639 125.335 74.6133 cv
125.335 75.3442 125.12 76.021 124.768 76.6064 cv
124.014 76.5654 123.24 76.6758 122.491 76.9678 cv
121.732 77.2646 120.647 77.6875 119.675 78.0664 cv
118.415 77.4204 117.542 76.123 117.542 74.6133 cv
117.542 72.4639 119.29 70.7148 121.438 70.7148 cv
cp
121.653 63.8965 mo
121.653 62.2764 122.969 60.959 124.587 60.959 cv
126.21 60.959 127.53 62.2764 127.53 63.8965 cv
127.53 65.5176 126.21 66.8359 124.587 66.8359 cv
122.969 66.8359 121.653 65.5176 121.653 63.8965 cv
cp
130.331 54.1777 mo
131.472 54.1777 132.399 55.1064 132.399 56.248 cv
132.399 57.3887 131.472 58.3164 130.331 58.3164 cv
129.188 58.3164 128.259 57.3887 128.259 56.248 cv
128.259 55.1064 129.188 54.1777 130.331 54.1777 cv
cp
137.347 49.5688 mo
138.285 49.5688 139.048 50.334 139.048 51.2739 cv
139.048 52.2139 138.285 52.9785 137.347 52.9785 cv
136.403 52.9785 135.636 52.2139 135.636 51.2739 cv
135.636 50.334 136.403 49.5688 137.347 49.5688 cv
cp
144.866 46.4712 mo
145.615 46.4712 146.224 47.082 146.224 47.8325 cv
146.224 48.582 145.615 49.1919 144.866 49.1919 cv
144.117 49.1919 143.507 48.582 143.507 47.8325 cv
143.507 47.082 144.117 46.4712 144.866 46.4712 cv
cp
150.054 52.9536 mo
151.872 52.9536 153.351 54.4326 153.351 56.25 cv
153.351 58.0693 151.872 59.5488 150.054 59.5488 cv
148.236 59.5488 146.757 58.0693 146.757 56.25 cv
146.757 54.4326 148.236 52.9536 150.054 52.9536 cv
cp
153.413 45.6587 mo
154.89 45.6587 156.091 46.8633 156.091 48.3442 cv
156.091 49.8228 154.89 51.0259 153.413 51.0259 cv
151.931 51.0259 150.726 49.8228 150.726 48.3442 cv
150.726 46.8633 151.931 45.6587 153.413 45.6587 cv
cp
153.278 67.9268 mo
151.671 68.2393 150.371 69.2344 149.605 70.5498 cv
147.671 70.1123 146.22 68.3872 146.22 66.3223 cv
146.22 63.9297 148.167 61.9824 150.562 61.9824 cv
152.958 61.9824 154.907 63.9297 154.907 66.3223 cv
154.907 66.8569 154.797 67.3633 154.62 67.8364 cv
154.179 67.8135 153.73 67.8374 153.278 67.9268 cv
cp
159.239 41.2974 mo
160.313 41.2974 161.187 42.1729 161.187 43.2485 cv
161.187 44.3223 160.313 45.1958 159.239 45.1958 cv
158.159 45.1958 157.28 44.3223 157.28 43.2485 cv
157.28 42.1729 158.159 41.2974 159.239 41.2974 cv
cp
165.565 38.1978 mo
166.429 38.1978 167.132 38.9038 167.132 39.772 cv
167.132 40.6411 166.429 41.3481 165.565 41.3481 cv
164.694 41.3481 163.985 40.6411 163.985 39.772 cv
163.985 38.9038 164.694 38.1978 165.565 38.1978 cv
cp
172.755 36.5063 mo
173.443 36.5063 174.003 37.0698 174.003 37.7622 cv
174.003 38.457 173.443 39.022 172.755 39.022 cv
172.059 39.022 171.493 38.457 171.493 37.7622 cv
171.493 37.0698 172.059 36.5063 172.755 36.5063 cv
cp
181.661 33.8931 mo
181.101 34.478 180.751 35.2661 180.751 36.1372 cv
180.751 36.3755 180.781 36.6064 180.83 36.8306 cv
180.311 36.8442 179.794 36.8589 179.292 36.8799 cv
178.838 36.1426 178.554 35.2935 178.492 34.3818 cv
178.737 34.2524 179.647 34.0059 181.661 33.8931 cv
cp
181.419 29.1367 mo
181.84 29.4111 182.382 29.6025 182.996 29.7065 cv
182.996 31.6436 li
181.15 31.6748 179.816 31.8027 178.858 31.999 cv
179.343 30.7666 180.257 29.75 181.419 29.1367 cv
cp
179.309 20.5791 mo
179.196 20.4438 178.972 19.9941 178.972 19.1968 cv
178.972 18.4048 179.195 17.9585 179.307 17.8242 cv
179.631 17.8242 182.603 17.8242 182.603 17.8242 cv
182.603 17.8242 182.603 14.8545 182.603 14.5264 cv
182.739 14.4141 183.188 14.1934 183.983 14.1934 cv
184.775 14.1934 185.221 14.4141 185.358 14.5259 cv
185.358 14.8535 185.358 17.8242 185.358 17.8242 cv
185.358 17.8242 188.331 17.8242 188.657 17.8242 cv
188.77 17.959 188.993 18.4058 188.993 19.1968 cv
188.993 19.9937 188.768 20.4429 188.655 20.5791 cv
188.329 20.5791 185.358 20.5791 185.358 20.5791 cv
185.358 20.5791 185.358 26.8945 185.358 27.2593 cv
185.221 27.3726 184.774 27.5967 183.983 27.5967 cv
183.188 27.5967 182.739 27.3726 182.603 27.2588 cv
182.603 26.8936 182.603 20.5791 182.603 20.5791 cv
182.603 20.5791 179.634 20.5791 179.309 20.5791 cv
cp
189.139 32.1147 mo
187.89 31.8057 186.321 31.6782 184.795 31.645 cv
184.795 29.7397 li
185.481 29.6465 186.079 29.4385 186.54 29.1387 cv
187.735 29.771 188.667 30.8315 189.139 32.1147 cv
cp
183.997 43.4106 mo
185.542 43.4106 186.788 44.6587 186.788 46.2017 cv
186.788 47.7368 185.542 48.9927 183.997 48.9927 cv
182.458 48.9927 181.208 47.7368 181.208 46.2017 cv
181.208 44.6587 182.458 43.4106 183.997 43.4106 cv
cp
182.751 36.1372 mo
182.751 35.4448 183.318 34.8813 184.015 34.8813 cv
184.704 34.8813 185.264 35.4448 185.264 36.1372 cv
185.264 36.8306 184.704 37.395 184.015 37.395 cv
183.318 37.395 182.751 36.8306 182.751 36.1372 cv
cp
184.001 38.5884 mo
185.034 38.5884 185.874 39.4341 185.874 40.4692 cv
185.874 41.5083 185.034 42.3521 184.001 42.3521 cv
182.96 42.3521 182.114 41.5083 182.114 40.4692 cv
182.114 39.4341 182.96 38.5884 184.001 38.5884 cv
cp
183.997 57.3242 mo
182.021 57.3242 180.417 55.7246 180.417 53.7485 cv
180.417 51.772 182.021 50.1685 183.997 50.1685 cv
185.978 50.1685 187.583 51.772 187.583 53.7485 cv
187.583 55.7246 185.978 57.3242 183.997 57.3242 cv
cp
187.309 66.1187 mo
186.383 65.4014 185.226 64.9697 183.968 64.9697 cv
182.727 64.9697 181.585 65.3896 180.665 66.0879 cv
179.978 65.3047 179.548 64.2896 179.548 63.1641 cv
179.548 60.7031 181.538 58.7129 183.997 58.7129 cv
186.458 58.7129 188.454 60.7031 188.454 63.1641 cv
188.454 64.3037 188.013 65.3315 187.309 66.1187 cv
cp
189.327 71.0264 mo
189.331 71.0264 li
189.33 71.0264 189.328 71.0273 189.327 71.0273 cv
189.327 71.0269 189.327 71.0269 189.327 71.0264 cv
cp
189.456 34.5132 mo
189.375 35.3789 189.092 36.1851 188.657 36.8887 cv
188.175 36.8677 187.681 36.8521 187.185 36.8379 cv
187.233 36.6113 187.265 36.3779 187.265 36.1372 cv
187.265 35.2881 186.931 34.5205 186.397 33.9404 cv
187.989 34.0791 189.04 34.3252 189.456 34.5132 cv
cp
189.477 34.0562 mo
189.477 34.1611 189.469 34.2646 189.461 34.3687 cv
189.426 34.2842 189.397 34.1826 189.397 34.0562 cv
189.477 34.0562 li
cp
195.009 36.5063 mo
195.705 36.5063 196.271 37.0698 196.271 37.7622 cv
196.271 38.457 195.705 39.022 195.009 39.022 cv
194.32 39.022 193.761 38.457 193.761 37.7622 cv
193.761 37.0698 194.32 36.5063 195.009 36.5063 cv
cp
202.199 38.1978 mo
203.07 38.1978 203.779 38.9038 203.779 39.772 cv
203.779 40.6411 203.07 41.3481 202.199 41.3481 cv
201.335 41.3481 200.632 40.6411 200.632 39.772 cv
200.632 38.9038 201.335 38.1978 202.199 38.1978 cv
cp
208.525 41.2974 mo
209.605 41.2974 210.484 42.1729 210.484 43.2485 cv
210.484 44.3223 209.605 45.1958 208.525 45.1958 cv
207.451 45.1958 206.578 44.3223 206.578 43.2485 cv
206.578 42.1729 207.451 41.2974 208.525 41.2974 cv
cp
214.351 45.6587 mo
215.832 45.6587 217.039 46.8633 217.039 48.3442 cv
217.039 49.8228 215.832 51.0259 214.351 51.0259 cv
212.875 51.0259 211.673 49.8228 211.673 48.3442 cv
211.673 46.8633 212.875 45.6587 214.351 45.6587 cv
cp
214.492 67.9268 mo
214.038 67.8369 213.587 67.813 213.145 67.8364 cv
212.967 67.3633 212.857 66.8569 212.857 66.3223 cv
212.857 63.9297 214.806 61.9824 217.203 61.9824 cv
219.597 61.9824 221.544 63.9297 221.544 66.3223 cv
221.544 68.3857 220.095 70.1094 218.164 70.5488 cv
217.398 69.2339 216.097 68.2393 214.492 67.9268 cv
cp
218.587 74.897 mo
218.609 74.9014 li
218.601 74.9014 218.593 74.9023 218.585 74.9023 cv
218.586 74.9004 218.586 74.8989 218.587 74.897 cv
cp
221.007 56.25 mo
221.007 58.0693 219.529 59.5488 217.71 59.5488 cv
215.892 59.5488 214.414 58.0693 214.414 56.25 cv
214.414 54.4326 215.892 52.9536 217.71 52.9536 cv
219.529 52.9536 221.007 54.4326 221.007 56.25 cv
cp
222.898 46.4712 mo
223.648 46.4712 224.257 47.082 224.257 47.8325 cv
224.257 48.582 223.648 49.1919 222.898 49.1919 cv
222.15 49.1919 221.541 48.582 221.541 47.8325 cv
221.541 47.082 222.15 46.4712 222.898 46.4712 cv
cp
230.417 49.5688 mo
231.361 49.5688 232.128 50.334 232.128 51.2739 cv
232.128 52.2139 231.361 52.9785 230.417 52.9785 cv
229.478 52.9785 228.716 52.2139 228.716 51.2739 cv
228.716 50.334 229.478 49.5688 230.417 49.5688 cv
cp
237.433 54.1777 mo
238.576 54.1777 239.505 55.1064 239.505 56.248 cv
239.505 57.3887 238.576 58.3164 237.433 58.3164 cv
236.292 58.3164 235.365 57.3887 235.365 56.248 cv
235.365 55.1064 236.292 54.1777 237.433 54.1777 cv
cp
243.177 60.959 mo
244.794 60.959 246.111 62.2764 246.111 63.8965 cv
246.111 65.5176 244.794 66.8359 243.177 66.8359 cv
241.554 66.8359 240.234 65.5176 240.234 63.8965 cv
240.234 62.2764 241.554 60.959 243.177 60.959 cv
cp
246.326 70.7148 mo
248.474 70.7148 250.222 72.4639 250.222 74.6133 cv
250.222 76.1221 249.35 77.4189 248.091 78.0649 cv
247.121 77.687 246.037 77.2646 245.279 76.9678 cv
244.528 76.6753 243.752 76.5649 242.997 76.6064 cv
242.644 76.0215 242.429 75.3442 242.429 74.6133 cv
242.429 72.4639 244.177 70.7148 246.326 70.7148 cv
cp
250.345 78.9424 mo
250.345 78.9424 250.332 78.937 250.321 78.9331 cv
251.487 77.856 252.222 76.3203 252.222 74.6133 cv
252.222 71.3613 249.576 68.7148 246.326 68.7148 cv
246.066 68.7148 245.81 68.7373 245.558 68.7705 cv
245.517 68.6055 245.464 68.4375 245.417 68.2715 cv
247.009 67.4512 248.111 65.8086 248.111 63.8965 cv
248.111 61.1738 245.898 58.959 243.177 58.959 cv
242.265 58.959 241.419 59.2246 240.685 59.6572 cv
240.544 59.4922 240.41 59.3281 240.261 59.1641 cv
241.025 58.4238 241.505 57.3926 241.505 56.248 cv
241.505 54.0039 239.677 52.1782 237.433 52.1782 cv
236.054 52.1782 234.837 52.8711 234.101 53.9238 cv
233.871 53.769 233.634 53.6152 233.394 53.4624 cv
233.849 52.8477 234.128 52.0952 234.128 51.2739 cv
234.128 49.231 232.462 47.5688 230.417 47.5688 cv
228.814 47.5688 227.458 48.6006 226.945 50.0308 cv
226.566 49.8628 226.171 49.6997 225.777 49.5356 cv
226.074 49.0342 226.257 48.4565 226.257 47.8325 cv
226.257 45.979 224.75 44.4712 222.898 44.4712 cv
221.222 44.4712 219.843 45.708 219.593 47.3145 cv
219.339 47.2363 219.099 47.1543 218.841 47.0776 cv
218.285 45.1118 216.494 43.6587 214.351 43.6587 cv
213.875 43.6587 213.417 43.7412 212.986 43.8779 cv
212.818 43.7397 212.646 43.6025 212.47 43.4668 cv
212.474 43.394 212.484 43.3228 212.484 43.2485 cv
212.484 41.0698 210.707 39.2974 208.525 39.2974 cv
207.667 39.2974 206.878 39.5796 206.232 40.0469 cv
206.078 39.9873 205.925 39.9268 205.769 39.8687 cv
205.769 39.8359 205.779 39.8052 205.779 39.772 cv
205.779 37.8013 204.171 36.1978 202.199 36.1978 cv
200.861 36.1978 199.707 36.9487 199.095 38.0435 cv
198.822 37.9902 198.541 37.9399 198.257 37.8896 cv
198.259 37.8467 198.271 37.8057 198.271 37.7622 cv
198.271 35.9668 196.808 34.5063 195.009 34.5063 cv
193.451 34.5063 192.148 35.6128 191.835 37.082 cv
191.582 37.062 191.32 37.0449 191.061 37.0269 cv
191.458 36.0991 191.679 35.0786 191.679 34.0073 cv
191.679 31.0513 190.004 28.4819 187.558 27.1899 cv
187.558 26.3945 187.558 23.9741 187.558 22.7793 cv
188.2 22.7793 188.85 22.7793 188.85 22.7793 cv
190.208 22.7793 191.192 21.2725 191.192 19.1968 cv
191.192 17.1265 190.208 15.624 188.85 15.624 cv
188.85 15.624 188.2 15.624 187.558 15.624 cv
187.558 14.9819 187.558 14.3315 187.558 14.3315 cv
187.558 12.9766 186.054 11.9932 183.983 11.9932 cv
181.909 11.9932 180.403 12.9766 180.403 14.3315 cv
180.403 14.3315 180.403 14.9819 180.403 15.624 cv
179.764 15.624 179.116 15.624 179.116 15.624 cv
177.758 15.624 176.772 17.1265 176.772 19.1968 cv
176.772 21.2725 177.758 22.7793 179.116 22.7793 cv
179.116 22.7793 179.764 22.7793 180.403 22.7793 cv
180.403 23.9727 180.403 26.3896 180.403 27.1875 cv
177.951 28.4785 176.273 31.0493 176.273 34.0073 cv
176.273 35.0732 176.491 36.0894 176.885 37.0137 cv
176.564 37.0356 176.243 37.0571 175.929 37.082 cv
175.616 35.6128 174.313 34.5063 172.755 34.5063 cv
170.957 34.5063 169.493 35.9668 169.493 37.7622 cv
169.493 37.8057 169.504 37.8467 169.506 37.8896 cv
169.224 37.9399 168.942 37.9902 168.667 38.0439 cv
168.057 36.9487 166.903 36.1978 165.565 36.1978 cv
163.591 36.1978 161.985 37.8013 161.985 39.772 cv
161.985 39.8052 161.994 39.8359 161.995 39.8687 cv
161.838 39.9268 161.686 39.9873 161.532 40.0469 cv
160.885 39.5796 160.097 39.2974 159.239 39.2974 cv
157.056 39.2974 155.28 41.0698 155.28 43.2485 cv
155.28 43.3228 155.289 43.3945 155.294 43.4673 cv
155.118 43.603 154.945 43.7397 154.777 43.8779 cv
154.346 43.7412 153.89 43.6587 153.413 43.6587 cv
151.271 43.6587 149.479 45.1118 148.921 47.0776 cv
148.664 47.1543 148.424 47.2368 148.171 47.3145 cv
147.92 45.708 146.54 44.4712 144.866 44.4712 cv
143.014 44.4712 141.507 45.979 141.507 47.8325 cv
141.507 48.4565 141.689 49.0342 141.987 49.5356 cv
141.593 49.6997 141.197 49.8628 140.818 50.0308 cv
140.305 48.6006 138.95 47.5688 137.347 47.5688 cv
135.3 47.5688 133.636 49.231 133.636 51.2739 cv
133.636 52.0952 133.914 52.8477 134.369 53.4629 cv
134.129 53.6157 133.893 53.769 133.662 53.9238 cv
132.925 52.8711 131.709 52.1782 130.331 52.1782 cv
128.085 52.1782 126.259 54.0039 126.259 56.248 cv
126.259 57.3926 126.738 58.4238 127.502 59.1641 cv
127.355 59.3281 127.22 59.4932 127.079 59.6572 cv
126.344 59.2246 125.5 58.959 124.587 58.959 cv
121.867 58.959 119.653 61.1738 119.653 63.8965 cv
119.653 65.8086 120.755 67.4512 122.346 68.2715 cv
122.299 68.4375 122.246 68.6055 122.205 68.7705 cv
121.953 68.7373 121.699 68.7148 121.438 68.7148 cv
118.187 68.7148 115.542 71.3613 115.542 74.6133 cv
115.542 76.3184 116.274 77.8516 117.436 78.9287 cv
117.412 78.9385 117.398 78.9434 117.398 78.9434 cv
117.398 78.9434 119.232 80.8887 121.656 84.0146 cv
120.963 85.3906 120.825 87.041 121.421 88.5869 cv
122.386 91.0488 124.895 92.4492 127.4 92.1221 cv
129.697 95.0342 133.556 98.5215 136.703 97.623 cv
136.703 97.623 156.4 88.4434 183.861 88.4063 cv
211.32 88.4434 231.019 97.623 231.019 97.623 cv
234.177 98.5254 238.052 95.0078 240.345 92.0898 cv
242.929 92.5469 245.576 91.1328 246.57 88.5918 cv
247.199 86.9629 247.021 85.2168 246.232 83.7998 cv
248.069 81.4448 249.528 79.811 250.076 79.21 cv
250.166 79.1216 250.253 79.04 250.345 78.9424 cv
cp
f
208.659 100.38 mo
209.836 100.622 210.995 99.8643 211.227 98.6885 cv
211.477 97.5068 210.723 96.3506 209.536 96.1084 cv
205.237 95.2217 li
204.057 94.9775 202.901 95.7412 202.659 96.9209 cv
202.422 98.1025 203.18 99.2529 204.362 99.499 cv
208.659 100.38 li
cp
224.122 102.605 mo
225.168 103.848 226.321 105.215 226.898 105.901 cv
227.626 105.497 228.603 104.955 229.358 104.536 cv
229.056 103.729 228.666 102.684 228.375 101.904 cv
227.49 102.05 225.725 102.341 224.122 102.605 cv
cp
179.562 95.7349 mo
181.179 96.6543 183.445 97.9429 184.076 98.3018 cv
184.707 97.9424 186.971 96.6543 188.585 95.7349 cv
186.971 94.8149 184.708 93.5254 184.076 93.1655 cv
183.444 93.5249 181.178 94.8145 179.562 95.7349 cv
cp
163.691 99.499 mo
164.875 99.2529 165.631 98.1025 165.395 96.9209 cv
165.152 95.7412 163.996 94.9775 162.814 95.2217 cv
158.518 96.1084 li
157.33 96.3506 156.578 97.5068 156.824 98.6885 cv
157.061 99.8643 158.217 100.622 159.396 100.38 cv
163.691 99.499 li
cp
138.696 104.536 mo
139.45 104.955 140.427 105.497 141.155 105.901 cv
141.733 105.215 142.885 103.848 143.932 102.605 cv
142.329 102.341 140.564 102.05 139.681 101.904 cv
139.389 102.683 138.998 103.729 138.696 104.536 cv
cp
224.542 106.145 mo
212.473 101.688 199.805 99.2993 186.825 99.0386 cv
184.076 100.603 li
181.332 99.042 li
168.249 99.3364 155.484 101.795 143.337 106.353 cv
141.614 108.398 li
136.269 105.431 li
138.127 100.462 li
138.409 99.7075 li
140.806 100.103 li
153.9 95.0771 167.68 92.4087 181.804 92.1572 cv
183.582 91.1455 li
184.076 90.8638 li
186.341 92.1538 li
200.525 92.3721 214.364 95.0269 227.519 100.059 cv
228.851 99.8389 li
229.646 99.7075 li
231.784 105.431 li
226.439 108.398 li
224.542 106.145 li
cp
f
2.8346 lw
0 lc
69.5127 128.607 mo
69.6206 127.591 69.5122 126.455 69.1553 125.31 cv
68.2412 122.403 65.5342 120.216 64.0225 120.685 cv
63.8311 120.749 63.5557 120.233 63.3506 120.302 cv
63.1553 120.362 63.2256 120.94 63.0303 121.001 cv
61.5146 121.47 60.54 124.815 61.4521 127.726 cv
61.8081 128.867 62.3643 129.859 63.0303 130.632 cv
@
1 lj
67.6748 134.063 mo
70.6162 133.147 72.4482 130.62 71.6221 127.978 cv
71.3193 126.997 70.499 126.944 70.499 126.944 cv
70.7568 127.718 69.0205 129.448 66.4775 130.251 cv
63.9404 131.04 61.5264 130.608 61.2998 129.819 cv
61.2998 129.819 60.6553 130.337 60.9639 131.323 cv
61.7842 133.966 64.7334 134.987 67.6748 134.063 cv
cp
@
1 lc
0 lj
68.5142 133.877 mo
68.686 134.391 68.7568 134.499 69.1006 134.966 cv
69.4502 135.44 69.8506 135.823 70.2881 136.128 cv
@
0 lc
82.8994 138.198 mo
83.8267 137.771 84.938 137.51 86.1372 137.481 cv
89.1836 137.417 92.1226 139.28 92.1626 140.863 cv
92.1626 141.065 92.7397 141.161 92.7402 141.377 cv
92.7456 141.581 92.1753 141.7 92.1807 141.904 cv
92.2217 143.49 89.3643 145.484 86.3154 145.553 cv
85.1206 145.581 84.002 145.372 83.0566 144.988 cv
@
1 lj
78.3184 141.688 mo
78.2441 138.607 80.0522 136.063 82.8203 135.999 cv
83.8457 135.972 84.1582 136.731 84.1582 136.731 cv
83.3433 136.735 82.2598 138.935 82.3135 141.601 cv
82.3784 144.257 83.5605 146.405 84.3804 146.367 cv
84.3804 146.367 84.0967 147.144 83.0635 147.167 cv
80.2974 147.236 78.3853 144.77 78.3184 141.688 cv
cp
@
1 lc
0 lj
78.2261 140.832 mo
77.6841 140.834 77.5596 140.802 77.0068 140.626 cv
76.4458 140.446 75.9546 140.189 75.5264 139.873 cv
@
0 lc
61.2925 195.954 mo
61.8862 195.124 62.7212 194.345 63.7476 193.724 cv
66.3608 192.156 69.8364 192.314 70.6577 193.67 cv
70.7573 193.845 71.3062 193.641 71.4146 193.829 cv
71.52 194.003 71.0835 194.39 71.1899 194.564 cv
72.0132 195.921 70.522 199.071 67.9097 200.644 cv
66.8862 201.261 65.811 201.634 64.8003 201.771 cv
@
1 lj
59.0483 201.257 mo
57.4556 198.62 57.7612 195.513 60.1323 194.084 cv
61.0093 193.551 61.6577 194.056 61.6577 194.056 cv
60.9526 194.463 61.103 196.91 62.4731 199.198 cv
63.8481 201.472 65.9399 202.75 66.6333 202.311 cv
66.6333 202.311 66.772 203.125 65.8872 203.657 cv
63.521 205.092 60.6362 203.899 59.0483 201.257 cv
cp
@
1 lc
0 lj
58.5435 200.561 mo
58.0737 200.831 57.9497 200.864 57.3823 200.985 cv
56.8062 201.108 56.2524 201.13 55.7241 201.067 cv
@
0 lc
45.5078 194.721 mo
45.1035 193.783 44.4502 192.847 43.5771 192.024 cv
41.3535 189.942 37.9209 189.367 36.834 190.518 cv
36.6992 190.668 36.2061 190.354 36.0605 190.514 cv
35.9199 190.663 36.2656 191.132 36.125 191.281 cv
35.0352 192.434 35.8301 195.826 38.0547 197.913 cv
38.9248 198.732 39.8975 199.323 40.8564 199.669 cv
@
1 lj
46.5879 200.376 mo
48.7002 198.134 49.0537 195.032 47.0361 193.137 cv
46.291 192.431 45.5508 192.788 45.5508 192.788 cv
46.1553 193.335 45.4932 195.695 43.6719 197.644 cv
41.8496 199.578 39.5352 200.388 38.9502 199.812 cv
38.9502 199.812 38.6436 200.579 39.3965 201.287 cv
41.4092 203.186 44.4795 202.626 46.5879 200.376 cv
cp
@
1 lc
0 lj
47.2285 199.803 mo
47.6299 200.165 47.7451 200.225 48.2734 200.462 cv
48.8105 200.704 49.3477 200.841 49.8779 200.891 cv
@
0 lc
70.9351 257.391 mo
71.0522 256.376 71.4067 255.29 72.0044 254.25 cv
73.5327 251.614 76.6509 250.071 78.0259 250.86 cv
78.1968 250.964 78.5786 250.521 78.7642 250.632 cv
78.9409 250.733 78.7466 251.283 78.9233 251.385 cv
80.3003 252.173 80.52 255.652 78.9946 258.292 cv
78.3979 259.327 77.6382 260.174 76.8198 260.782 cv
@
1 lj
71.5366 263.117 mo
68.8677 261.58 67.6313 258.713 69.0151 256.315 cv
69.5239 255.425 70.3354 255.552 70.3354 255.552 cv
69.9165 256.251 71.2319 258.318 73.5376 259.658 cv
75.8413 260.982 78.2905 261.089 78.6851 260.368 cv
78.6851 260.368 79.1997 261.015 78.6831 261.908 cv
77.3071 264.309 74.2056 264.661 71.5366 263.117 cv
cp
@
1 lc
0 lj
70.7583 262.752 mo
70.478 263.216 70.3853 263.305 69.9478 263.686 cv
69.5034 264.072 69.0288 264.358 68.5366 264.56 cv
@
0 lc
56.4521 263.735 mo
55.6426 263.114 54.6152 262.614 53.4521 262.321 cv
50.4961 261.585 47.2188 262.756 46.8291 264.29 cv
46.7852 264.487 46.2021 264.453 46.1523 264.663 cv
46.1016 264.862 46.6328 265.104 46.582 265.302 cv
46.1914 266.839 48.5391 269.415 51.498 270.154 cv
52.6572 270.446 53.7939 270.488 54.7998 270.323 cv
@
1 lj
60.1504 268.148 mo
60.9023 265.161 59.7012 262.28 57.0156 261.608 cv
56.0215 261.355 55.5479 262.026 55.5479 262.026 cv
56.3428 262.21 56.9141 264.594 56.2725 267.183 cv
55.623 269.76 53.9961 271.595 53.2051 271.376 cv
53.2051 271.376 53.3105 272.195 54.3135 272.447 cv
56.9961 273.125 59.4043 271.141 60.1504 268.148 cv
cp
@
1 lc
0 lj
60.4307 267.336 mo
60.957 267.457 61.0869 267.452 61.6641 267.403 cv
62.251 267.353 62.7871 267.21 63.2744 266.995 cv
@
0 lc
109.379 305.008 mo
108.986 304.064 108.765 302.943 108.779 301.745 cv
108.826 298.698 110.793 295.829 112.378 295.846 cv
112.579 295.853 112.696 295.28 112.912 295.286 cv
113.116 295.288 113.214 295.863 113.418 295.866 cv
115.004 295.881 116.895 298.811 116.853 301.858 cv
116.837 303.054 116.588 304.163 116.171 305.094 cv
@
1 lj
112.701 309.712 mo
109.621 309.673 107.142 307.774 107.179 305.007 cv
107.188 303.98 107.958 303.695 107.958 303.695 cv
107.934 304.511 110.091 305.672 112.758 305.716 cv
115.415 305.746 117.604 304.644 117.596 303.821 cv
117.596 303.821 118.361 304.135 118.346 305.167 cv
118.318 307.934 115.784 309.755 112.701 309.712 cv
cp
@
1 lc
0 lj
111.843 309.772 mo
111.825 310.314 111.787 310.437 111.591 310.982 cv
111.392 311.538 111.118 312.019 110.787 312.435 cv
@
0 lc
100.151 318.377 mo
99.1401 318.231 97.9995 318.298 96.8423 318.611 cv
93.9038 319.415 91.6177 322.04 92.0288 323.568 cv
92.0864 323.762 91.561 324.017 91.6206 324.225 cv
91.6733 324.423 92.2554 324.374 92.3081 324.571 cv
92.7192 326.103 96.0269 327.202 98.9692 326.399 cv
100.123 326.087 101.135 325.567 101.931 324.932 cv
@
1 lj
105.535 320.417 mo
104.729 317.444 102.272 315.519 99.6011 316.247 cv
98.6108 316.513 98.5259 317.329 98.5259 317.329 cv
99.3091 317.101 100.973 318.9 101.68 321.472 cv
102.375 324.038 101.852 326.434 101.055 326.63 cv
101.055 326.63 101.548 327.293 102.546 327.022 cv
105.217 326.301 106.347 323.392 105.535 320.417 cv
cp
@
1 lc
0 lj
105.381 319.571 mo
105.9 319.42 106.011 319.353 106.49 319.027 cv
106.977 318.696 107.375 318.31 107.696 317.884 cv
@
0 lc
297.013 257.345 mo
296.896 256.33 296.541 255.244 295.943 254.204 cv
294.416 251.568 291.296 250.025 289.921 250.814 cv
289.751 250.918 289.369 250.475 289.183 250.586 cv
289.007 250.688 289.201 251.237 289.025 251.339 cv
287.648 252.127 287.427 255.606 288.953 258.246 cv
289.55 259.281 290.31 260.128 291.128 260.736 cv
@
1 lj
296.412 263.071 mo
299.08 261.534 300.316 258.667 298.933 256.27 cv
298.423 255.379 297.613 255.506 297.613 255.506 cv
298.031 256.205 296.716 258.272 294.41 259.612 cv
292.107 260.937 289.658 261.043 289.263 260.322 cv
289.263 260.322 288.748 260.969 289.265 261.862 cv
290.64 264.263 293.742 264.615 296.412 263.071 cv
cp
@
1 lc
0 lj
297.189 262.706 mo
297.47 263.17 297.562 263.259 298 263.64 cv
298.445 264.026 298.919 264.313 299.412 264.514 cv
@
0 lc
258.541 305.008 mo
258.935 304.064 259.156 302.943 259.142 301.745 cv
259.095 298.698 257.126 295.829 255.542 295.846 cv
255.341 295.853 255.224 295.28 255.009 295.286 cv
254.804 295.288 254.707 295.863 254.501 295.866 cv
252.916 295.881 251.025 298.811 251.068 301.858 cv
251.083 303.054 251.332 304.163 251.75 305.094 cv
@
1 lj
255.22 309.712 mo
258.3 309.673 260.779 307.774 260.742 305.007 cv
260.732 303.98 259.962 303.695 259.962 303.695 cv
259.986 304.511 257.83 305.672 255.162 305.716 cv
252.505 305.746 250.316 304.644 250.324 303.821 cv
250.324 303.821 249.56 304.135 249.574 305.167 cv
249.603 307.934 252.136 309.755 255.22 309.712 cv
cp
@
1 lc
0 lj
256.078 309.772 mo
256.095 310.314 256.134 310.437 256.33 310.982 cv
256.529 311.538 256.802 312.019 257.134 312.435 cv
@
0 lc
267.862 318.435 mo
268.872 318.288 270.012 318.354 271.17 318.669 cv
274.108 319.472 276.395 322.097 275.983 323.626 cv
275.926 323.819 276.452 324.073 276.391 324.282 cv
276.338 324.479 275.756 324.431 275.704 324.628 cv
275.293 326.159 271.985 327.259 269.043 326.456 cv
267.889 326.144 266.877 325.624 266.081 324.989 cv
@
1 lj
262.477 320.474 mo
263.284 317.501 265.741 315.575 268.411 316.304 cv
269.401 316.569 269.487 317.386 269.487 317.386 cv
268.704 317.157 267.04 318.958 266.333 321.528 cv
265.637 324.095 266.161 326.491 266.958 326.687 cv
266.958 326.687 266.463 327.351 265.465 327.079 cv
262.795 326.358 261.665 323.448 262.477 320.474 cv
cp
@
1 lc
0 lj
262.631 319.628 mo
262.112 319.478 262 319.409 261.522 319.085 cv
261.036 318.753 260.637 318.366 260.317 317.94 cv
@
0 lc
311.56 263.685 mo
312.37 263.063 313.397 262.563 314.56 262.271 cv
317.516 261.534 320.793 262.706 321.183 264.239 cv
321.227 264.437 321.81 264.403 321.86 264.612 cv
321.911 264.812 321.379 265.054 321.43 265.251 cv
321.821 266.788 319.473 269.364 316.514 270.104 cv
315.355 270.396 314.218 270.438 313.212 270.272 cv
@
1 lj
307.862 268.099 mo
307.11 265.11 308.311 262.229 310.997 261.558 cv
311.991 261.306 312.464 261.976 312.464 261.976 cv
311.669 262.159 311.098 264.544 311.74 267.132 cv
312.389 269.71 314.016 271.544 314.807 271.325 cv
314.807 271.325 314.702 272.146 313.699 272.397 cv
311.016 273.075 308.608 271.091 307.862 268.099 cv
cp
@
1 lc
0 lj
307.582 267.286 mo
307.055 267.407 306.925 267.401 306.348 267.353 cv
305.761 267.302 305.225 267.159 304.738 266.944 cv
@
0 lc
285.035 138.198 mo
284.107 137.771 282.996 137.51 281.796 137.481 cv
278.75 137.417 275.812 139.28 275.771 140.863 cv
275.771 141.065 275.195 141.161 275.194 141.377 cv
275.189 141.581 275.759 141.7 275.753 141.904 cv
275.712 143.49 278.57 145.484 281.619 145.553 cv
282.814 145.581 283.932 145.372 284.877 144.988 cv
@
1 lj
289.616 141.688 mo
289.69 138.607 287.882 136.063 285.114 135.999 cv
284.088 135.972 283.776 136.731 283.776 136.731 cv
284.591 136.735 285.674 138.935 285.621 141.601 cv
285.556 144.257 284.374 146.405 283.554 146.367 cv
283.554 146.367 283.837 147.144 284.871 147.167 cv
287.636 147.236 289.548 144.77 289.616 141.688 cv
cp
@
1 lc
0 lj
289.708 140.832 mo
290.25 140.834 290.375 140.802 290.927 140.626 cv
291.488 140.446 291.98 140.189 292.408 139.873 cv
@
0 lc
306.75 196.012 mo
306.156 195.183 305.32 194.403 304.294 193.782 cv
301.681 192.215 298.205 192.373 297.384 193.729 cv
297.285 193.903 296.736 193.7 296.626 193.888 cv
296.521 194.062 296.958 194.448 296.851 194.623 cv
296.029 195.98 297.519 199.13 300.132 200.702 cv
301.156 201.319 302.23 201.692 303.242 201.829 cv
@
1 lj
308.994 201.315 mo
310.585 198.679 310.281 195.572 307.91 194.143 cv
307.033 193.609 306.384 194.114 306.384 194.114 cv
307.089 194.522 306.939 196.969 305.568 199.257 cv
304.193 201.53 302.101 202.809 301.408 202.369 cv
301.408 202.369 301.269 203.184 302.154 203.716 cv
304.521 205.15 307.406 203.958 308.994 201.315 cv
cp
@
1 lc
0 lj
309.498 200.619 mo
309.968 200.89 310.091 200.923 310.66 201.044 cv
311.236 201.167 311.789 201.188 312.318 201.126 cv
@
0 lc
298.47 128.635 mo
298.362 127.619 298.471 126.483 298.828 125.337 cv
299.742 122.431 302.449 120.244 303.96 120.712 cv
304.152 120.777 304.427 120.261 304.632 120.33 cv
304.828 120.39 304.757 120.968 304.953 121.029 cv
306.468 121.498 307.443 124.843 306.531 127.753 cv
306.174 128.895 305.619 129.887 304.953 130.66 cv
@
1 lj
300.308 134.091 mo
297.367 133.175 295.535 130.648 296.361 128.005 cv
296.664 127.025 297.484 126.972 297.484 126.972 cv
297.226 127.746 298.962 129.476 301.505 130.279 cv
304.042 131.068 306.457 130.636 306.683 129.847 cv
306.683 129.847 307.328 130.365 307.019 131.351 cv
306.199 133.994 303.25 135.015 300.308 134.091 cv
cp
@
1 lc
0 lj
299.469 133.905 mo
299.297 134.419 299.226 134.527 298.882 134.994 cv
298.533 135.468 298.132 135.851 297.695 136.156 cv
@
0 lc
322.426 194.719 mo
322.831 193.782 323.484 192.845 324.357 192.023 cv
326.581 189.94 330.013 189.365 331.1 190.516 cv
331.235 190.667 331.728 190.353 331.874 190.513 cv
332.014 190.662 331.668 191.13 331.809 191.279 cv
332.899 192.432 332.104 195.825 329.879 197.911 cv
329.009 198.731 328.037 199.321 327.078 199.667 cv
@
1 lj
321.346 200.374 mo
319.234 198.132 318.88 195.031 320.898 193.135 cv
321.643 192.43 322.383 192.787 322.383 192.787 cv
321.779 193.333 322.441 195.694 324.262 197.642 cv
326.084 199.577 328.399 200.386 328.984 199.81 cv
328.984 199.81 329.291 200.577 328.538 201.286 cv
326.525 203.185 323.455 202.624 321.346 200.374 cv
cp
@
1 lc
0 lj
320.706 199.802 mo
320.304 200.163 320.189 200.224 319.661 200.46 cv
319.124 200.702 318.586 200.839 318.056 200.89 cv
@
156.448 335.752 mo
169.984 337.908 168.156 336.762 168.16 336.764 cv
168.165 336.766 170.124 336.225 156.784 334.107 cv
143.408 331.762 125.578 324.128 125.578 324.242 cv
125.439 324.398 142.801 333.344 156.448 335.752 cv
cp
f
1.4 lw
0 lc
156.448 335.752 mo
169.984 337.908 168.156 336.762 168.16 336.764 cv
168.165 336.766 170.124 336.225 156.784 334.107 cv
143.408 331.762 125.578 324.128 125.578 324.242 cv
125.439 324.398 142.801 333.344 156.448 335.752 cv
cp
@
93.1875 302.941 mo
103.285 312.193 102.74 309.797 102.603 309.963 cv
102.746 309.803 104.292 310.838 94.3438 301.717 cv
84.2148 292.725 72.9863 277.014 72.8818 277.014 cv
72.584 277.127 82.8672 293.75 93.1875 302.941 cv
cp
f
93.1875 302.941 mo
103.285 312.193 102.74 309.797 102.603 309.963 cv
102.746 309.803 104.292 310.838 94.3438 301.717 cv
84.2148 292.725 72.9863 277.014 72.8818 277.014 cv
72.584 277.127 82.8672 293.75 93.1875 302.941 cv
cp
@
58.0518 246.895 mo
62.7373 259.775 62.918 257.59 62.8965 257.604 cv
62.9189 257.6 64.2715 259.074 59.6533 246.383 cv
55.1826 233.566 53.2119 214.343 52.9805 214.343 cv
52.7295 214.304 53.5059 233.814 58.0518 246.895 cv
cp
f
58.0518 246.895 mo
62.7373 259.775 62.918 257.59 62.8965 257.604 cv
62.9189 257.6 64.2715 259.074 59.6533 246.383 cv
55.1826 233.566 53.2119 214.343 52.9805 214.343 cv
52.7295 214.304 53.5059 233.814 58.0518 246.895 cv
cp
@
54.7822 180.413 mo
52.251 193.885 53.9639 192.145 53.7695 192.121 cv
53.96 192.154 53.9307 194.035 56.4287 180.756 cv
58.7461 167.392 66.6006 149.79 66.3926 149.582 cv
66.1406 149.383 57.167 166.777 54.7822 180.413 cv
cp
f
54.7822 180.413 mo
52.251 193.885 53.9639 192.145 53.7695 192.121 cv
53.96 192.154 53.9307 194.035 56.4287 180.756 cv
58.7461 167.392 66.6006 149.79 66.3926 149.582 cv
66.1406 149.383 57.167 166.777 54.7822 180.413 cv
cp
@
84.5449 121.219 mo
75.8906 131.848 78.0889 131.043 77.9863 130.974 cv
78.0811 131.051 77.2871 132.793 85.8184 122.317 cv
94.4043 111.815 109.463 99.6426 109.615 99.8379 cv
109.772 99.9946 93.3184 110.516 84.5449 121.219 cv
cp
f
84.5449 121.219 mo
75.8906 131.848 78.0889 131.043 77.9863 130.974 cv
78.0811 131.051 77.2871 132.793 85.8184 122.317 cv
94.4043 111.815 109.463 99.6426 109.615 99.8379 cv
109.772 99.9946 93.3184 110.516 84.5449 121.219 cv
cp
@
3.4016 lw
160.667 335.643 mo
160.638 335.133 161.296 328.473 158.38 326.6 cv
155.815 324.969 155.481 329.541 153.887 329.205 cv
152.044 328.791 151.995 327.182 151.609 324.568 cv
151.354 323.006 151.126 319.451 147.841 318.518 cv
143.396 317.262 144.952 324.086 142.199 324.299 cv
139.738 324.506 140.014 320.59 139.998 317.916 cv
139.979 313.385 138.053 310.621 133.621 311.232 cv
128.586 311.656 133.068 319.656 130.787 320.596 cv
128.644 321.482 127.193 320.084 125.916 317.74 cv
123.166 312.791 117.69 312.906 114.521 317.664 cv
111.271 322.555 114.273 328.184 120.6 327.744 cv
123.46 327.564 125.336 328.158 126.167 330.367 cv
127.185 333.113 116.989 333.412 120.398 338.289 cv
123.663 342.545 128.221 342.24 131.533 339.201 cv
133.62 337.291 135.927 334.646 137.976 336.184 cv
140.397 338.031 134.185 342.406 139.563 344.244 cv
143.635 345.631 145.899 342.857 146.965 341.711 cv
148.726 339.848 149.608 338.268 151.599 338.715 cv
153.309 339.08 151.547 343.352 154.987 342.99 cv
158.903 342.578 160.464 336.104 160.667 335.643 cv
cp
@
100.131 307.545 mo
100.348 307.1 104.094 301.742 102.404 298.857 cv
100.968 296.266 98.5586 299.936 97.3857 298.854 cv
96.0566 297.566 96.8574 296.092 97.7178 293.732 cv
98.248 292.279 99.6436 289.236 97.25 286.895 cv
94.2217 283.533 92.1553 290.238 89.79 289.021 cv
87.6992 287.92 89.6191 284.861 90.8857 282.564 cv
92.8398 278.826 92.7813 275.334 88.7031 273.736 cv
84.0342 271.799 84.3125 280.611 81.8271 280.383 cv
79.6045 280.092 78.8838 278.307 78.8398 275.736 cv
79.1191 270.033 74.2471 267.588 69.1904 270.191 cv
64.1543 272.781 64.1729 278.963 69.5195 281.76 cv
72.1221 282.924 73.5918 284.225 73.2139 286.539 cv
72.8594 289.313 63.7402 284.879 64.4863 290.572 cv
65.2422 295.773 69.0078 297.885 73.4814 296.719 cv
76.1748 296.084 79.5938 294.768 80.498 297.16 cv
81.5918 299.979 74.3311 300.627 77.8691 304.924 cv
80.708 308.018 84.082 306.627 85.541 306.156 cv
87.998 305.346 89.4385 304.49 90.873 305.881 cv
92.1318 307.039 88.5127 309.922 91.6475 311.227 cv
95.2832 312.639 99.7344 307.846 100.131 307.545 cv
cp
@
61.6338 254.268 mo
62.0449 253.982 67.9463 251.125 68.0283 247.73 cv
68.0879 244.75 64.0947 246.811 63.5654 245.307 cv
62.9766 243.551 64.2949 242.689 66.2598 241.037 cv
67.4365 240.023 70.292 238.016 69.4004 234.791 cv
68.1895 230.434 63.2754 235.227 61.6953 233.035 cv
60.2451 231.088 63.6465 229.316 65.8838 227.934 cv
69.6367 225.6 71.0703 222.563 68.1777 219.182 cv
65.2207 215.191 60.9189 223.031 58.9678 221.603 cv
57.0234 220.278 57.5293 218.342 58.835 216.072 cv
61.6914 211.232 58.5488 206.717 53.001 206.518 cv
47.207 206.316 44.2861 211.703 47.7588 216.762 cv
49.373 219.055 49.7568 220.929 48.4434 222.746 cv
46.6719 224.998 41.1201 216.654 38.8174 221.99 cv
37.0469 226.881 39.5254 230.539 43.7764 231.75 cv
46.4287 232.518 49.8242 233.09 49.6084 235.582 cv
49.2969 238.551 42.4756 235.598 43.6768 241.033 cv
44.5938 245.143 48.0645 245.619 49.5664 245.924 cv
52.043 246.434 53.8174 246.361 54.4512 248.258 cv
55.0176 249.873 50.5508 250.586 52.6016 253.279 cv
54.9414 256.344 61.1465 254.334 61.6338 254.268 cv
cp
@
54.2617 189 mo
54.8154 188.959 61.1299 189.307 62.9316 186.392 cv
64.4746 183.826 59.9736 183.679 60.2666 182.109 cv
60.6152 180.291 62.2451 180.192 64.71 179.693 cv
66.2246 179.382 69.6865 179.015 70.4453 175.756 cv
71.4922 171.356 64.8223 173.133 64.5947 170.476 cv
64.4834 168.132 68.1152 168.179 70.7559 168.065 cv
75.0352 167.808 77.8037 165.872 77.1025 161.586 cv
76.3105 156.593 68.9502 161.429 67.8457 159.19 cv
66.9629 157.158 68.002 155.561 70.3145 154.251 cv
75.2305 151.458 74.7402 146.014 69.9814 143.112 cv
65.0469 140.111 59.8154 143.362 60.3135 149.442 cv
60.5371 152.201 60.3018 154.185 58.0996 155.056 cv
55.5508 156.204 54.5645 146.102 50.1025 149.714 cv
45.9941 153.055 46.3359 157.44 49.5918 160.623 cv
51.5205 162.581 54.4072 164.805 52.7979 166.813 cv
50.9941 169.227 46.5205 163.338 44.9404 168.674 cv
43.7705 172.719 46.5811 174.828 47.751 175.826 cv
49.7227 177.493 51.248 178.283 50.8701 180.245 cv
50.5557 181.928 46.3164 180.375 46.7578 183.718 cv
47.2324 187.52 53.8594 188.826 54.2617 189 cv
cp
@
79.7393 128.253 mo
80.1934 128.45 85.6367 131.936 88.6104 130.254 cv
91.1895 128.751 87.3418 126.422 88.3545 125.188 cv
89.5068 123.736 91.0527 124.515 93.4609 125.297 cv
94.9287 125.761 98.1152 127.122 100.34 124.613 cv
103.476 121.349 96.7656 119.625 97.8701 117.195 cv
98.8945 115.07 102.03 116.87 104.382 118.048 cv
108.207 119.871 111.725 119.703 113.086 115.469 cv
114.826 110.719 106.05 111.37 106.185 108.888 cv
106.342 106.598 108.113 105.826 110.778 105.815 cv
116.347 105.641 118.692 100.839 115.899 95.9092 cv
113.097 90.9648 106.822 91.0645 104.386 96.7451 cv
103.229 99.2568 101.975 100.756 99.6895 100.526 cv
96.8984 100.275 100.94 90.9658 95.292 91.9463 cv
90.2002 93.0029 88.2129 96.8193 89.54 101.224 cv
90.2793 103.885 91.7266 107.246 89.3652 108.237 cv
86.6113 109.46 85.5996 102.158 81.5518 105.968 cv
78.5938 108.953 80.0254 112.178 80.5635 113.626 cv
81.4541 116.031 82.3213 117.4 81.0732 118.961 cv
79.9883 120.284 77.0469 116.851 75.8193 120 cv
74.3994 123.568 79.4238 127.867 79.7393 128.253 cv
cp
@
207.287 335.643 mo
207.316 335.133 206.658 328.473 209.574 326.6 cv
212.138 324.969 212.472 329.541 214.067 329.205 cv
215.91 328.791 215.958 327.182 216.344 324.568 cv
216.599 323.006 216.828 319.451 220.113 318.518 cv
224.557 317.262 223.001 324.086 225.754 324.299 cv
228.215 324.506 227.94 320.59 227.956 317.916 cv
227.975 313.385 229.901 310.621 234.333 311.232 cv
239.368 311.656 234.885 319.656 237.167 320.596 cv
239.31 321.482 240.76 320.084 242.038 317.74 cv
244.788 312.791 250.263 312.906 253.432 317.664 cv
256.682 322.555 253.68 328.184 247.354 327.744 cv
244.494 327.564 242.618 328.158 241.787 330.367 cv
240.769 333.113 250.964 333.412 247.555 338.289 cv
244.291 342.545 239.733 342.24 236.42 339.201 cv
234.333 337.291 232.027 334.646 229.978 336.184 cv
227.556 338.031 233.769 342.406 228.39 344.244 cv
224.319 345.631 222.054 342.857 220.989 341.711 cv
219.228 339.848 218.345 338.268 216.355 338.715 cv
214.645 339.08 216.407 343.352 212.966 342.99 cv
209.05 342.578 207.49 336.104 207.287 335.643 cv
cp
@
267.823 307.545 mo
267.606 307.1 263.86 301.742 265.549 298.857 cv
266.986 296.266 269.395 299.936 270.568 298.854 cv
271.897 297.566 271.096 296.092 270.236 293.732 cv
269.706 292.279 268.31 289.236 270.704 286.895 cv
273.732 283.533 275.798 290.238 278.164 289.021 cv
280.254 287.92 278.334 284.861 277.068 282.564 cv
275.114 278.826 275.172 275.334 279.25 273.736 cv
283.919 271.799 283.641 280.611 286.126 280.383 cv
288.349 280.092 289.07 278.307 289.114 275.736 cv
288.834 270.033 293.707 267.588 298.763 270.191 cv
303.799 272.781 303.781 278.963 298.434 281.76 cv
295.832 282.924 294.362 284.225 294.74 286.539 cv
295.094 289.313 304.213 284.879 303.467 290.572 cv
302.711 295.773 298.946 297.885 294.472 296.719 cv
291.779 296.084 288.36 294.768 287.456 297.16 cv
286.362 299.979 293.623 300.627 290.084 304.924 cv
287.246 308.018 283.872 306.627 282.413 306.156 cv
279.956 305.346 278.515 304.49 277.081 305.881 cv
275.822 307.039 279.441 309.922 276.306 311.227 cv
272.67 312.639 268.219 307.846 267.823 307.545 cv
cp
@
306.32 254.268 mo
305.909 253.982 300.007 251.125 299.925 247.73 cv
299.866 244.75 303.859 246.811 304.388 245.307 cv
304.977 243.551 303.659 242.689 301.694 241.037 cv
300.517 240.023 297.662 238.016 298.553 234.791 cv
299.764 230.434 304.678 235.227 306.258 233.035 cv
307.708 231.088 304.307 229.316 302.07 227.934 cv
298.317 225.6 296.883 222.563 299.776 219.182 cv
302.733 215.191 307.035 223.031 308.986 221.603 cv
310.93 220.278 310.424 218.342 309.119 216.072 cv
306.262 211.232 309.405 206.717 314.953 206.518 cv
320.747 206.316 323.667 211.703 320.195 216.762 cv
318.581 219.055 318.197 220.929 319.51 222.746 cv
321.282 224.998 326.833 216.654 329.136 221.99 cv
330.907 226.881 328.428 230.539 324.177 231.75 cv
321.525 232.518 318.129 233.09 318.345 235.582 cv
318.657 238.551 325.478 235.598 324.277 241.033 cv
323.36 245.143 319.889 245.619 318.387 245.924 cv
315.911 246.434 314.136 246.361 313.502 248.258 cv
312.936 249.873 317.403 250.586 315.352 253.279 cv
313.012 256.344 306.807 254.334 306.32 254.268 cv
cp
@
313.692 189 mo
313.138 188.959 306.824 189.307 305.022 186.392 cv
303.479 183.826 307.98 183.679 307.687 182.109 cv
307.338 180.291 305.708 180.192 303.244 179.693 cv
301.729 179.382 298.267 179.015 297.508 175.756 cv
296.461 171.356 303.131 173.133 303.359 170.476 cv
303.47 168.132 299.838 168.179 297.198 168.065 cv
292.918 167.808 290.15 165.872 290.851 161.586 cv
291.643 156.593 299.003 161.429 300.108 159.19 cv
300.991 157.158 299.952 155.561 297.639 154.251 cv
292.723 151.458 293.213 146.014 297.972 143.112 cv
302.907 140.111 308.138 143.362 307.64 149.442 cv
307.417 152.201 307.652 154.185 309.854 155.056 cv
312.403 156.204 313.389 146.102 317.851 149.714 cv
321.959 153.055 321.618 157.44 318.362 160.623 cv
316.433 162.581 313.546 164.805 315.156 166.813 cv
316.959 169.227 321.433 163.338 323.013 168.674 cv
324.183 172.719 321.373 174.828 320.203 175.826 cv
318.231 177.493 316.706 178.283 317.083 180.245 cv
317.398 181.928 321.637 180.375 321.196 183.718 cv
320.721 187.52 314.094 188.826 313.692 189 cv
cp
@
288.214 128.253 mo
287.76 128.45 282.317 131.936 279.343 130.254 cv
276.764 128.751 280.612 126.422 279.599 125.188 cv
278.447 123.736 276.901 124.515 274.493 125.297 cv
273.025 125.761 269.838 127.122 267.614 124.613 cv
264.478 121.349 271.188 119.625 270.083 117.195 cv
269.059 115.07 265.923 116.87 263.572 118.048 cv
259.747 119.871 256.229 119.703 254.868 115.469 cv
253.127 110.719 261.904 111.37 261.769 108.888 cv
261.612 106.598 259.84 105.826 257.175 105.815 cv
251.607 105.641 249.261 100.839 252.054 95.9092 cv
254.857 90.9648 261.131 91.0645 263.568 96.7451 cv
264.725 99.2568 265.979 100.756 268.264 100.526 cv
271.055 100.275 267.013 90.9658 272.662 91.9463 cv
277.753 93.0029 279.741 96.8193 278.414 101.224 cv
277.674 103.885 276.227 107.246 278.588 108.237 cv
281.342 109.46 282.354 102.158 286.402 105.968 cv
289.36 108.953 287.928 112.178 287.39 113.626 cv
286.5 116.031 285.632 117.4 286.88 118.961 cv
287.965 120.284 290.907 116.851 292.134 120 cv
293.554 123.568 288.53 127.867 288.214 128.253 cv
cp
@
211.505 335.752 mo
197.969 337.908 199.797 336.762 199.793 336.764 cv
199.789 336.766 197.83 336.225 211.169 334.107 cv
224.545 331.762 242.375 324.128 242.375 324.242 cv
242.514 324.398 225.153 333.344 211.505 335.752 cv
cp
f
1.4 lw
211.505 335.752 mo
197.969 337.908 199.797 336.762 199.793 336.764 cv
199.789 336.766 197.83 336.225 211.169 334.107 cv
224.545 331.762 242.375 324.128 242.375 324.242 cv
242.514 324.398 225.153 333.344 211.505 335.752 cv
cp
@
274.766 302.941 mo
264.668 312.193 265.213 309.797 265.351 309.963 cv
265.208 309.803 263.662 310.838 273.61 301.717 cv
283.739 292.725 294.967 277.014 295.072 277.014 cv
295.37 277.127 285.086 293.75 274.766 302.941 cv
cp
f
274.766 302.941 mo
264.668 312.193 265.213 309.797 265.351 309.963 cv
265.208 309.803 263.662 310.838 273.61 301.717 cv
283.739 292.725 294.967 277.014 295.072 277.014 cv
295.37 277.127 285.086 293.75 274.766 302.941 cv
cp
@
309.902 246.895 mo
305.216 259.775 305.036 257.59 305.057 257.604 cv
305.035 257.6 303.682 259.074 308.3 246.383 cv
312.771 233.566 314.742 214.343 314.973 214.343 cv
315.224 214.304 314.448 233.814 309.902 246.895 cv
cp
f
309.902 246.895 mo
305.216 259.775 305.036 257.59 305.057 257.604 cv
305.035 257.6 303.682 259.074 308.3 246.383 cv
312.771 233.566 314.742 214.343 314.973 214.343 cv
315.224 214.304 314.448 233.814 309.902 246.895 cv
cp
@
313.171 180.413 mo
315.703 193.885 313.99 192.145 314.184 192.121 cv
313.994 192.154 314.023 194.035 311.525 180.756 cv
309.208 167.392 301.353 149.79 301.561 149.582 cv
301.813 149.383 310.787 166.777 313.171 180.413 cv
cp
f
313.171 180.413 mo
315.703 193.885 313.99 192.145 314.184 192.121 cv
313.994 192.154 314.023 194.035 311.525 180.756 cv
309.208 167.392 301.353 149.79 301.561 149.582 cv
301.813 149.383 310.787 166.777 313.171 180.413 cv
cp
@
283.409 121.219 mo
292.063 131.848 289.865 131.043 289.967 130.974 cv
289.873 131.051 290.667 132.793 282.135 122.317 cv
273.549 111.815 258.491 99.6426 258.338 99.8379 cv
258.181 99.9946 274.635 110.516 283.409 121.219 cv
cp
f
283.409 121.219 mo
292.063 131.848 289.865 131.043 289.967 130.974 cv
289.873 131.051 290.667 132.793 282.135 122.317 cv
273.549 111.815 258.491 99.6426 258.338 99.8379 cv
258.181 99.9946 274.635 110.516 283.409 121.219 cv
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Nicol\630 Fabbiane) ()%%Title: (KTH-logo-new.eps)%%CreationDate: 02/10/14 15:55%%Canvassize: 8640%AI9_DataStream%Gb!R&q-G"'dP,ub_"V4P#Fi^#I=\VkI1HG^JV4kM#[oI?k'?*7s7ibZ]9@;GVlHPYeEu[IH^Wd8HY._j0kIm@PtIlVV*\Umq=/e*%q"h5Gr7?=&fDN;?>'\<anr@;C$AIlfP=@XfVJJ6'JITf*Tt/P(/\@&1^e`1[@9=$;DS93QG\Og6Na'bSUYW(2T:;tVI(oGQm59Ai%H[p$Lq9-eLF7\kug2jCqPUij'fJf:\c]-1]l_W0`DTWk!FlR*$j72s5nDiW=d@/CNNf.<:L/=JL!>hEJcO@JX>(?O]CE*H)`neoJ%I,2dqg`-*;g?<Wd+tsX8).`E8h.aS+@k8\)*e$75grLGKC$2P[B-h5;ZF-R:Ra5b\?$@=4Kb('F)R^(s@/@J!-N7<t"X'K<(9^IO%&!-*QX4DQ4^A]PNWO8150=B@E$t`6bg\?ioq2XRuD'*HZg/d(:oWl_FIr2j24kD_(=rkM)i<P["5>sc;Q9\bk2<U5fa"[+><OQc!%a?,hnL7u5):Nm)]g<2p$r:S_;HQH4jrqP2][XU*u+$\?0\uiD%ViUi[$_^djVQkX(2^]]nNRleK@u$1oFiS,Z4_W\0SiMUU^\M-P%ART,sjhIn5f37L6d/d9a5(=]Ok4;p+"#.`Dm@Qj@G&[*)Gl?>YV\.68V?]NY9Y3tkK`?&`Y]`LmG(A6dkXEfZn:-`W3nK"6=V$<!%Ym&q`!u?oJR>tI3&!*pc3_l(4fN.>.:9k`/iN[lG-=p!KT-*ul%2id8kql`B'S,AI#83)pPn-W`c]-PgC@_TF"B`7>#)r-\4S@KW%@,HgeoF:`rj,K%jrk:C/6>K[d^mR9[DnMS"k7@?&X4@,mgNgJNk)-3`c.b]/7al,5fpAO_Oo>dg^Kc,5/#E5k]l=Qe=T4gV2dZN!%4?).3ZiX-P]uto+[GH5)rn9[CI)mDcrb9kDJ:dsbVpg^I:51KTG^-?uncTargjf50^8V-mj<,a""4CB92b:9plWm`QA:K@(0j&@A%VfcO-<dq1DdJf^:g2&q\[,J1kFq,iI[f>g[j-Y;bHM#>ceD1dV&FBe"_LGiEcoS]Bq!u0;HaWSFr:nX=^&<D]a)qsb^$(<$f+2Bi%o5`T5IVcbiISq</[8uIqrnKL3Vql("UgZW*gcrO0!@-%LQD8<2]V/Yp5Q+l7CCne:mnIPB.M1;m+;e,+2`I'U'Dqc[cb@4/Yk-0s%-l\GbfB1tooLF?o=1eTS=Sm@2r$^YWLUEI<IPt7fI=r9G&N%o+7laChi'/QY'?M?KIkPR+K+n$2j1C>&qM4+b#5_eS[Yq&RC\kK!%Vi)Up-G#o2EJGWP39VtqF29$#jY-Ua5Bc#'*ru81\+0e"WukOE%\OUc3U62g=(-,h+d]CJK])lEl9Hj[nXe5lY!'[jf#V9ta1!`+%f@CA$B&GbB8KTe,0^r2oFN7##Om$bupn(fXmW;^[N"`-l]K34'gFrTqs(snVJfj`l#fZDU%fK"I(ii1Jjlp-V/N>B?FA1/]?WsUh%\2<$N/9OL3BV:;rs2r=EVU4)fRTR41NV_W0I96W;dCXXU)@Wp^FH(^f6jKI^IlJ8V7=Y]cq,d`!G.lJ+jU*r3i,@7tpt'!rH)T<j%L]/pk<Z1*048-&16@GX([(<U>nbaC)l5]F]BFj!d?pDO>Xpu@oNup$#WM/=##JISVH>\69#-R,Xa/#Bi\`*kB%@$4&UQ\1c_2q,V%AV+N"fn!KGn(o,/XGt1Bp#\%P$FEq<!M(mXeCm\1:^s3R"6fibrRU<hOQkgV-]K%[hJ.7Y%(:\=cED\=Re`-c8Eps=q%9,^iVXW#%i)[Sjq"!rKHVsE$A&B(tf=0".lRlO7j^4[Rn'TilD)H(/0\a?o\Z`GF280o255;<V]FSO<X,)0J4,A=G[ZTh?-2a1<RcHO#3Jef^%'0]ONWMUN:0FVa#J(<8N@b-g&KDe/>d9*OP`;b./IYFug?qjjd[i_/1]5'J-DA4>2YI(>0#1L37i%&P]!X7K@5Fm;\3,shJ?J@C]%_:f:>`_i6)<I=]Ng*42#d-anM!BuZikcb#_e9PoF2DPj+\QODsgh!0QcuMO53U"+n+3?I;B:'Vl#=q!)iHigGD*=WT+-I7_.O?jp%s06bEgrRA-4]h;@][?'+%Jt?dp&@`aD#UW^PJa9N=o$sqL\'mO=s0aP_%t5:NrSg$!FtpY)Tr(%G%pjQn,MCrpclD#g<YiQs6[,E%F?Ip"_,04(HdZ/K2]a&iBA$RbjaU;>Z[%,8gLFQ>5MgO3B:0NRpn++B#at@QeN[2KoZr#52Bidd@lFA0,[(-,ZO&2:UhSUB4.u-1%2sraYn<7Eah7rb=3;uM;SMi]9o`dj.s5W9,S5TCO+hTWm[6%3?L)l%6j>\LS\Eb:GG:AL`in1\R-TYQ(HN$t;UUY5a4Wg?=5J;YC%g&1'p+';o%V<ML%M*Ydifc^0Q08$A1dJudVctNFpSg/7b.3:8<$eqlo06tnK%&M@mg9qaK_rN>3j#Ho!]YU\t7q*m640@4PqlL(G%>5ngsn9C:<$R\cs;+NJ:>S1Of4kkk9l(Jh8^L?H37fI2`?_.,7h.*@+qtU*AiQ$R$:j+oBpM6rC+16knrj_b>/@ULAbMN^%jBKu*%o<1XL%:-&d.oEf&,JRn([HIO(e2oA`gY-`9[2tU@Oe:-q+5^J?BUeo-k5,-oe*c?bobYEFc]>8hHj;!jX_#,nC-FM.&dqrBDmo'P%G>.q7-VhBrf^+:*<cF\^rb<F#4EhiTXK-`Jg0n,P,i:RFbo]AGV@:knYO3N_db%=FZ"Ze3^5BJp*\Int,#=WLTB9u.3"#Ct<$k&'%]`Doa5'UaoVq'<+B3'A.:2e[3H@3=.(6C`EfOh5id&Pp;3OH)7>72+Zf^3mDr\F8&1:IFlR4udkgUtM`@ihW([A7Uf+tFQIP-j@W%Ml!I,o@Kkp8GU;-@es^60j'ZnJ:\D*TOFWa&%["eML2DHpXY24[p2!M4!l=*kA9=aKm'UKi*#BJ<pf;eKaQs^0Spm6X<D<%I^G0C%_2(#KLa6'o8%hL0#b@(^XDp!-]%b5B8sNGY=UMFNo4H6o:HV<[p8d%,*^CFP]sZ#,NL.<,Yg"0rm."RXlMJtPMM^HkM60bSZFJc$%#C>1eDu[q_[iYRd4eK00nb5o`dc.j:7n/Zs80(5@H)M<(!gt?-BPcK1T3LCnpiY<+>'K(?l_0h0Gi%R9jnt*VeZRMq)Zd+5mJ]]q%3Al,0Y5a^0.BH8B[@KcbB[["D,Z#:e\an_@WSGLtEK<#NGm50a@[h\Eq3F/(qq"U=mQ%X"Z#/2:\&#/i\=VF9B/m>k;o[6<h`g&N%9Ps@SGc8^qBL8J?o<grJUm*d`3Z]ZV:6uZPZto]E_(j]+&hpa/W_fmYG#SIAXo@uoNp:h.D,@o=*]Pui^=A]9)RNG?:(?VT;U:Dg%*=P/.hnYm?!'*5Ll^7kW[B@3W"p+FB7>k@BP/?l.7;rseb,=A!\&L!>A>$otjfaT?hi<`#9DQ>]oFV+m[oW,"1"]Z!Hrlu(1`cao%16fS=L)Y6W#+\#Qo=#*W]CR!^.&?bDC0hE[im2jr\OK_No6,nRH[a4%W40C_aP!kU?c6k=3(+fBoc.M\I4%t2:*?l@c<Af),u:b0%':6+<Y,Ip>BCl,:h+/J44$+\3@Q!ei7f2`7[FT2'a/\^>g_J@<k>rK[WFof^Zu7$J0=;LNK2#L<<^`EL3kdoVJs+QuXI46X9;12!%@X1?;Ok=KDDHH/O4Z'eV!W'F]qB,-]88(GHKSh9GLO]t#fA:i>)SB@5IR%O_itVZ/fldlfS8%lAe]dS'=L-4^8$%3nY[b3bS&0nL%rB74i`Xa(Ah++^EH8KCdq1cQs%s6O\elqIJ*A=c:fM+NJ6`@7$&K0<26>CDAeuG*V&t;gB8pJi')G@ot]<*jR%'A&Wa-n`V3I\=S%lco8ErgC'MR<JAV\o5<[D0F@L?;Q6\e(FfpX[X\>9Z`O5L`Y!%$7%A6j'"WW&RD>^1!.sCh%;+'R$Xn0.MUV,Z0ER_R(.k,:6Ft?%RP57^rT0Y.Gps[j421mb+mcsH%@SdgS:tjM==,bXZU5<<b8NhH4SUO16+@7f4+$Y-]!LGMlOB(^Lim=OroMEVTAN\Vb07]Gbjt4_%M4Y4Bo9X`$I.9XQU+[;+jfb5_om;2SBm\iMZ*o+b>qUtPNL@a!kP&*#gg1tiX%])F$=bkb:S5["LYr'8g#%k[eZ\l@fZ_D6l.G@=%`VS5WG$o!K`QKHJDi[mk?`^]`5(LJO5?Z0"^R!)$ch*arcHGt.F2'W&mPe(VPM^-02iVRTctY-ahQG/<*U^)sq<]JHqt%;fB(NWW%^<sOkY-!32]_o@O\@PeoVcV\UhMXDiAYqLII00B74%[n4'.TLKrZk=AX3lC.eQQX9Khc6([#0"KVBJI\p,5"q`m<er-gg>c:-B[j%[&kERq_R1(5%^+h`]hegBjK;^b*BEEAU3_PJ)JYTBDD/]HFVGierPIL0CbTN\NfKWSY,#r:4H"[mcOq>DIo`kj5*f[^=1D<`E$1r%[,O/1euu2q@t%U)ROcHsgJbE`Es\Dk^PfM!bDl9lXih)h;k#t,m<!aIcH-eJh368qgg%83YM[nE3cubVa/>u=8Y,k/[O/_\a\H7s%9"/#G.oSO=jbm4B?iR)c][Po?W<ddoL!K91FUGd+]+JAu9AnkQ`pP!n>O#PFns-V-:n</4X_&A"rVX<rfW"gs1u=@c8ks!Selk:&%(![IRh5i]A;iVaMBm]N.RFLIZ:onqbfo2QhkOE#.b5KhIla6?T9.uNeb?$pf3n6.eN@!7,oFbK\aj]k46@>]^jUZ5"a7`*k9ZK*H%$\bM$q.X*3\Uq7Iqf.uW=(c!BnZ[%u0[m:!X8R3(M4ICcOn[&]oWl(aFo\)EDn/2VY5@Y@-1CJHXr-EQ3Sf0GB:WpF5Ac-eqL(fe%^Y5pP3mADnj4j$>pM&WF6et3n4d^+M-?cukFAlI>kk(mNS^'1Je1'rjKYVqUf6__$fhQ@]V`2d,M4G\oDssjJFc)@>\uKN.;\rak%J]IL45#*2;n%@:JchI*E@]*jCQ*"]a1foL$l^i;!B!*D$\m.;rq<cdKCo?0VDl;VV"dt>*hV>2U^*O?cg<tEiI4`E^H?f)Ok@4D]%FDRj>3or$E.@r3KF+$'?q/hbKl)&Xqjo'7JVai86f%"NI)X.r^Tl)ggbW,t4p9r#U*GYJQe(T%Z/%fS^>9Db*/F7JUCXX7t/<kU4%]\L<*]_f(gMU(nHoZ8BIoZ<_cS2?kFK0u+h25Z[sgYkoNXnK[#"ElgR4,%"NJClN9>u*GLd-4079,(\kIFdY'EFUmnhQbVUUFFdY%O3[Z@LqKRjR>(%I?0DI'X`TK<1O[R)s7?OWh>E(Pg3R!VnP88^Pf#<55$KObqFmHKb@g_Le1(+.juRM4[Vr@0Yu@c_^k_oenVb\Z%*U)#:P0U2[gXid"K)%G+gGKLPo&\R(oks-j+18B"g<T@b-fNgZ-,%knSr!7Z<a]ulXKXUnNo.iJR-iX0a5*98nbXrI);kGl(*$n*%hnHPSUEA66jBJncgRXA&07A')J%bGfCusm8`g;?s3t$Bs]+aT,DtgU\\\e?iN;\n.]lS8)ZLfl:nEo*2n[s34(]1=Ypg"D*;I_V>%@f+lT=Ne8CDk0[:[B#:`KPs'kc`<\QX[Kl<'\cuar\iGU>YFkbp?YN(q0F(]mD8)MT>csrMZ<D>"A\#Bm@0*'K^USn]U8)DOmqb]%HZSVSiPg:nq;^*fWQh^*`_c$BoTeA&mU+kaT*Op@k1eUDYrFr5DC/5^EH/MA)*_lSs8$(!nU'QIc?S]bKl:>dcAQ1fbAlFJ>)P=H%EWpOG9<j<1Qb1!keom(fXM*Q$>sbKtHLoQ+q_>K"qsDG-q;QMTo@P_m[YnVarF0JejkFlOrd*h2o_D3`HuC:+QMg-l5:!qLm9dn6%@@F`HVO;1%N(ramk[Usb-f;pUc[UOPH#r_&XE[bA^e`!aIoaVPp23,3\p/8Kc^#?9:GA6d($\Tg>WM:[Vna:cp`O(%XJGa>U>(OI%j5On^1q`>f0R#!T\_.l[VA>6U\?RjC<0,t6#nt;XmL(goDC85Oe8o!aegarQG<3J6F"X^rD0*r^9'Fcm!%[<a>e#pPL-!$GRF:?N%R%<$selM*7FD@OnTlfU;:V8b2f0Q<=cX?nT:cl'[-WT_d=ZK>?^&.G96?W^L/3KOFb&/F,7W*R2n'nq]9^["Mo0EcOb&Fh#4!\nT%eg/lX[n3.A&j&O!HqTr)S1A;!M4LA)EgB,M=kP7Q0#D\cq%Qt3I26o6lCL30KfK"?bLGrnU(Q)U#qa2Y(<82;COOu#'bkA5Eu*3p%fC!Zilb]i<M_f.np*&IFpf']\DheT3:fcrXXeQQ&n\HdVB3A0g2rl&I]@*-2;>8Q0-P2>;=&hHPg;t6AFM><X<kS;Jobp-jCR*e:%o`G+K+Zc!N\@K,Y#KChmY"u8"fu-?,6QsG*daCTNq$/1?e@2t595/eOkri^sV^m-20P#%P/emLkA;62>_+/YoB!=J*FDGbE"B=U!%F`n1CI_q<7A"*7hrK9:AG%=F3+]TR2k%Ep#7Si0M+Y8dVTJ>).e#W?f]noMaS>\>kbl!e"^&>J:jU18]l(?\KHJAkMoeVr\^E3#N%^Y&_705(k>O*/b[7_:@F:9<gJ[rqNSF6STb.EKeuR6=Wm_![@fgATOu797]sHmL2<E`Q,B9hoR"7JS4?=!T.(:&3Oe3o+jk`/9AB%bLtLGkh3JK^8W-/fnW!lY0_5IIW"?g5MB<CKc*\%Xh@M8.?!#I)qRTNeFAW:T>c;_<2XLJm5E=ChMW'%ah+jC3&Pbt@;ioaWJ+,&%7dB;rhPC.hp/'1&ZpsHF9[68lZ-]RET4h9q@e=^7/UU7aQr&Bffsk?ALEqi2L*8b4)TUr8@9m/EVPUE\G9Vt7-P&\6qt]7GUf7,J%@%(5PP@mdT<QeG]ON!uH>o3(J0&7Gjke=*Wn%WMfGNl`"34ZIH)C;KHm)CURLTd!B)UB2.k'5[%U8AW2;#H)A6#pGTn4%9m5YpI#%b4"K:@Ur`^an+s-,;\29[I=*4r$5q,MD8::F@eg(UnoI-/[?Ykla'WlXN`5@[SS&-T%ZjtR!S"U+^Vh9$;4C\=NVBT>i-ptUOVY[%Idb24Do^:_L%DA;*0NOXE`U?QA5MN`^Y]\r6X&Gq5O/Y'WcVLehL&"nlMR=jm%r-A?b_mdWm$!WLI$)B<SL%d=0@W"=YIB3D-Wd%%3$CrSq>M`j[CQrH/1bLjUf^`noh@1/g#@s&XBf)VKalXNgaX9ACWCIsjQFSRFI%5D%Rm(NQX^Q\M<]5dd%t-jlO)BD972P$q64`6%pfQ;:_basmh!UHo//KRK\0]urFg@Kb5T?k1G#;o<pa)s[+^lurD(-0^p.L-O8i,u]"(@Wrlqi""JLgn[lBVP"Ut<$c"qoS0TLkDX%O/TIE)ll2mS:reRM`[.jnnXhKj<psC]=?_^YCctU`X[prDY5/:&iL#_@H323aqaake:7Tcn<gNCrp5S7!5SLrokX"Dc>S"-b<\22%EuBhKhN>B9-@\KUP?30\`fKh3I5FV$)tHmH2mDm"h:J'*PQ0=`me-+n%/cOZ]n5R@XBRg7m,:tX'$D>J=Dt4\ppJb2CiGVKqX-iX%X1PibBfEW>P<:+)^')fH-dtSLW5!P%8Bf2$F;4@&MDMbQGGY9[E,ttr&jT=<lJ=eJ++FR`Frea.\2R`;[7:&X>HX(GPK5eYh2_t.%\m,b!SN5rL>?M8r8/CLPVU^_<,fsBqe4K5_KK31tRitQp=I$nUA1alTmmU7@0_'4<%*CD6KD@/6"4AgKa4PX"@oBusi=PD5p;4kC%)7IN\3XFo`N*sEe7F/aMpjE(a(k'TeQ%OCXc/l9`R:/FmFAC_O*-q\nJ@@]*-$%iO7[S:1@BTL+9@.743c9H1OO.R,4r-?I9#[3;%rW^U3i\Z)@V=1uL-\DsO3^/,?pUSA8]:u$&rDeZTP%DB^*_Z7:+u4";R9V$u[dl-uYL9GI*-k/8Y;`&W+kanLA5&N_%(u`LbB;<I%YK5dRnFV"o.JA3!Z>bK$Y<t,\+/BSGoJLA],&C3j#)XWq%\/(j00%OYTMKTe01h#1pmR>0MY`_k`7a<?U.r[!['T`X>*=XDp;R@`%>5K`eXj4)c`un"bq?1GB`X!2$1PXMGWaI$@NXrbrcf-5(!.4aIIu+s(]-'5R9=2%Q`*Nbr9k*=&7;I"j.`=N]7*jF]BYbIk6jl$i%3fMZfKPnne1'ImOdW?b6.r4-3L7G<&o0br,HUo3D1JZ!u%t&k9(6J26A81K[MV61^rj*]@S,%Nuh9$Ie<_tL3?m_@rl%pdfaRqD/%QqMsBkS+<>&uu=^8)AUP8_uIa.X>heJWTQhoh.@SB=[ITHl@GQ7_]Hgl1I-/Ku7&@BOUQn^k<]nI2W0m/EUI%=W"Fq!85^_QR](5%@rh?Cls'KBXk6S=gG&JP#R`j)LH<Dg`Td,:=E9+eGVYhEl"=EI@;=g-`\=<!j=J66n6(#Pnm8nJ?Ns+m_V&;7SV?X9<0O4j)FgGR%!9<pDBT@g<8\6b6@tDWd%ui>sVAmTe5aH+OB$bW#Q/0WaO=G%`'RMEB>tH@p'.or:N;G^hH4!jWrF>5mD[B=UG<0#O8F`16EH6g$%'fhZ(0uq^Rij"a3:JO$>DVHU0>!h@TZFt`*c)"2[AVSG5QMB1Q;n?h12<CqIW8=:>Mm=s`7;i`?-SlG1Uf\C^E`-Ej]TU@XU%I)=%A-j_T[9Q9p^'0P4$rtRdPmi:;Esnm^/o`(V+-9G==AjB;J*Pi@`KNl;D"dUq;lkr4+.MlaDW3/0EeVojd%sgjF]AhZ=@8E]6-$(Y%iG7Z*/*PE]"oG9m9<Xur<soLE6^M+FQRe#lL+^/k/lF8\E"-*!"^S8bRMrd0$9H>t(dSU:H98-U)F4g<H3Kl)Kc?nD0"ljslXRVD%ke[YJaVAE+ES>SN%X`:Cd)p]B6V?qA*e.qt9&*ac/S:rJ;RF.]1M`%9ouIE`mcam9*VYajSfHcPSk@9bl\eNo<Ar[$B%%WU_.GG^%;8P'%'P+O;c]9p8hN`08k?%)Z?SW9X'$TT'Uu]\=*cA3H+a'-qTm*liU:G*Gk&OMUetLljrX,V#8-NFK5:IK2kJh1EF"DMl[[=#.%WMQW_,3u+=Z!01$Z9QB;E4ubH0b0)sikmZO/#d0dgH__\@;-%$8Vuc5VJ/g^"At"j#'TG/M(G0K"ZG\t9K6Lf)6q:n.N^IhXP3G<%HA[>ao]AJa(j7LpAn$m:?R;S^N\>/S@rL+N1G4uqk[RKA=`;@>9XgMPDC_l?BX!<CPF#P,+'/V8\I+19?rrn@FeYKh^@\H61?[?H%D'`d2X#X80BpDql[a\I:9c-cc.NR]'LI!6L^l,&4[!r!bY8m=$lM+]7mi%SWUQ2Nj9h[;uKPG`lZI@FQE0cH1,Zgl8K.MDM$q[_i%*`bp@'MApioK>bud0?FLf^\:9\e:Pp9C7O!2P:*@YhcX9O`0n\^L^$N>Z=lP+claQZ1@FccMm(5]0"3")2sqf(1XPk[@:Xl-/9)@%XBgj9)?pA2@DuD%Wq@iC3e8VmWSE"Se/]Du[X"$/gj8GfhW.3;0h0eZOVl6S$GFNCVR^N@?[3i543=?i)F)rbjfff:e#Osa<=G_T%q?3'IYPks_\kJqc;bAX'Mig'B'iAs$0T\I&6RlVh>6oX.O\VHVf'So4AiH"@0rV0qMFMU&/.be5AR^3sQ#VXJMUWk\3Eoi3R?Sk_%rLID3'mA7m1;1!B1DIg)$n6LHa0NG6Nd,*Y8cPoJ9p`gDZ`NVT&"f],S&$<o@XL>_L6p_)4>Pm)#5#U.iMRIOOce<;fuqb=pW19P%$i9=E-4$YfeQ%_m=FFL?*gm-q58'hpVL?JD*2&:TM3G8W8Z[;]'q3Hu)=*hPSjce2gD`RUiprM/ShZ>GcsU1i^!Sf^BPMOTZf)QX%9,ZGmWW+6SaSGD8QRR'NBDGXTFWm_fYZG+9J%:NC)6/$doC^PtlJrhL=t/5g6%k-]OtWe43B:<D*qVQL'hMU7=>;r`M]HoMT(dSl%U)o?V_t7o+%p]])aSfWIf>GR?6'&SuDQ!uobk5p<1/pbC%nAC#kT/<V*\R.Ud)>jt60mL(fhb!0Dm]1V1&$\PZ4Y^+A[j$o"SH`V%\u7'+,Hcf[Z,I?m3p9-Q1dDkV(Y_VrTZfEYOXl0MFiu<rO^2*&KC/WDiQLOa#\D55m"m)A1H9H/(\'nPkC,lFoJ+3=ClLTqdVUq`%kJ6hXBP4:SZ"Uj-htsD-0IE$>-#Dh"32'%p?N5kcoGU:ie57SP]L!\_4&=]n$$%S:)fAnf%T#n=dDgao,M7a;D^2e%R.-ng_edmS%i>H)DW`WXB%XHY8_il'9O2"C>1!LW!Ks-m.FW6d,Wp@)_SDd/[LP;t(WcX[qX]2*F)b!3\p%o"F;?>J7.T3J-7o5>JO5$G.8?Ijn%bbeml<fm`6L6A#u]i_.97='t@epQbl+uT6Td&KYWT@ZRP,j!J(IZo`[7\0A7CtCS80D8M(CjmsB$C<0]7Tp.SqH2(&T("!1."t;t%QdM,9%HY(C>RK)T>rcRI>iZBhS(>?N'J@t;0_/,O,l^t9q[Ccr/>=8-Ir\0?;`I(;^Dl.,qUjoN/l]`?ZbV!ZIeR4S#;RJ2?UR)2%%WgA7?S^DDE$8JG?7f56KlBpf(U2&cb=AK(P+fBG18KjKTm0(;NX+tQqSHQuMe2':oqMaIh>=7"GQ%F$q<:MJZaRWrqRLjWpiZO,%cP<HqQ/-BE'91hsp#VUjYD^Y41Cefd3eir!e]j$<br]EMBmcK9K]MQ$r5n+V`GUISC+U2:lqer^.!D(>^H>QQ=.p82V>9E,AQ#ef%7:Odb^<ELQ<7oU)g'O<2'DSO"O/-6o*Yij:AoagEXEJ'Npo*mR;Ctou>[\EtG!!,AV:0Ai(d0`.3fOoei<,Lo8JQDL.Aan!I'ZjK%lr;`pqg=p\.DEi(YR]97,o+&JU_UL93m!q1I@9j_47.?TYAj,Y:eU*G,_`mdHfp6VJfNOt384kFl6O!G+S`l^Zhp+rXCQ'Y<jbI[%[U5a\[9qDSWu3V:bVqU&o&t`e?Wp;q<*Djl0aDGN/a'i\b&(+1"gZjYE/\Hn6\87Fd[nG!XW#)>qNZMpGZW0jnt<!Gnk%=%4G<Ag%ZBsY3hN<`0;e;nojSJMcF^9;OE&D/^=3u9K,9G.r979427pb)/*g'*c?c'En)09qI%]SVq".>";+dFg)QeLBda(=-]c!L/+a/-C[%H[r8cVml\@\j?9KrDh=cf`BM/2l^W(\6?K=qdG5YVMk$P`pB$8X6JVYl%Z-alm%I[Qt\d(2-kkddG!jt<R\p\l?P`fhplgg7X_]Y%\Y!WJ\2]Ig<fX,I0!:Km&fDQQ2-l`E-%%B$.&uOkI-o@.*E=t&aurfNXJUoVV$lIHNhVspma.i]+)*T<glS6h)\6:M(Unk(6=9"l%L2+<0oo%(L)QK7/)cb3CKa4QR9@b[b=\[Ka`<NKBlUHSPWK"KXDGZ5`=%sKD@HBsb9c&S8C9'j.9c&R-2tC^p\7eH8%fF](FE+^1%;<rB"C:^qGZ#F5a'\.;F[<0gfAb^#O3+@PIb8Nr0?%ttS&QI5ue^C;,a#CX3\6N9WOT?;E?gOJAMNP//Cb.pIR(#)]'g?2p(/2=W%om:h$6V>l]#(!I*<P-=AVk,QrL6tq:.9\+5P<lIp`WGHH=eLjYoc-2pmNH-S"dr\`l\hCpL;^AZFu%RrB;JO3,"7rR8YK'-lg>3^%EeQ*>R+V#RDYQbY8[D1^bUKGlnj@VLe?$VREu2RR.[s&es"el@&nX'iHoUFJG:Ae^fa?t!h$K[ET?JCg)fe9W+$d)>Md%r!F-jk@%\D.%)5D^H#P_\\4e1+JIT",5DhtkFs:@nm]b@`UEEHCR6Su]?6Ok!Scc[X&9r7X5$$)TUf*4hI!D(eg?#4SP3*K;_Jlg\4GDuSPP%q>;HcV!FHGS'+c>R%2*W[42Ulj,>7?CbO3/(Zj^/05Qc0m&h]sIRuZcipVUoMYCMh>'YW''r'AXVk_Fi3ZVcie7lp=W#gf?a"LRS%?]W@Mda4[!_NK-aGcoC8T#$H"OHi4YL>@E6,pKsb.YW4^FqM%:Ks`?_YX](:`>-A7cFNhZR!qY?^D.<B<BGVCGf`!2+u:ucL+?n<%+t<OKVB_n\nD7r<&qSb?.@NO3Yim<+4Y6-A*9slE<;2WDnj`>)+eFrDX4TOQ-5JB/ZhN3MR3!:3?2:ua4fg\AmCoEATP-4Al*$[7%i>nu%.uFS&<V2j#4s/d@Cln9UL-?ipW-_6_'f&IrpT.'1\.+4>iD.s*`kQLPco16:iGS./X8@2$/k$_W2ss.4q7&UEU6kFsCnJp)%jc-&g.Hui(^1S1-[<G\X;O3(bqgRM,a*Y"rh*.ps0AL-PeJscP7T.mXdl!;jfBe4![IK_-[BR4.Kse>YgK9e."sYs(q)EuCg?\LC%lLo\q\RKg[ok)2!&HR,G:frWXJjcMY>HBcTjEok8e/IFDaM]j2Dgg0Fa6`$!E)cI2BeF!:?4?5Q;Vlgp^/u_X#%T,k\nOTLXmddj%Z](la+tT5:Y,k9jiI3M'17#3r0/C);ZP5.MZm)sUi-$C^H=ea<&oS,$$SJ+9H*UiG9/0rlWTC3m9UQU4C3_G+(h,/KEf[OPULJJ9%W#/Fh7DC^_CDX`!Deb*AZ_$""SlcTU_^rqKZ!e?)^<np5!uXtT3[Y0[@Cl"gH3P0`h\I42\]<G_*I4'QSpO,;bL@K.,#us'26Luo%C6d&5\[_Wj1:'HXeQUN3X@2OCZ?quiXFK-?r4;lUUU@D=m<m`lY*J>'l<7a0dl:.\JqKuj*$-0q/k+W*4*u=gMQ;NU'sK[b.cmA9%0D!46.u!9IAesZ%8O[mtn*.^PZ)0"7_Za8d[=@T6c+?SWVqU:b[4cNjjpLGq2RQ..g?GfJBC=o0V:0CK=K=SLdoLi4d>..kMr4C>%$+59C`Pg33f#KF,[KmBl7Ki_'n=mQU(Fd7[]WN'BkuCpKhhr*;_+&5?RU<fVG5>pfnbXr<dmdT?_7OXBiKoHj!c&a1='H!%HJ>.6%$_s8ATh^jdH%NIO*rp`K7@<[PWup5:+gE'6[1<&IhTpl&.NPj=r0Z8`@[,/Gj)0<.GJ3s>l6fnp471JE->1uuEfjGI4uK\/O/8Dl%=6nhTJs!l:P$F1BSomT*![;2PIAOe+'fMa*)c:A#eTt\6<S.PG_38t''hq!;Y]Ok<ZWsX,QWfYP!#E7nEq$*9?5]1o%lP(c2'^=*%BPu.B5:N)8L(n7ER/N29kh3;LaIeu'$CL0-mW6.=jCta#nT<s6L;d0'fbM06S5nFhN3D<b-E_f8A.;nCpgE@C\<5Pb[t1SEU2$Kr%)^C10^soNBpQ,:.(r<nFYi]pKlTXdF*mh55boPUW`?hln".6K&XJaU#aHEm:ZM;Ha8L(]61KlY?)rFG`F&iTgCOD)`7aBp%cKG\n%9[&o7d=a'sf7f$'OF5_]SBHp@QM.Bgh$alf+P>t-lU"Pm8[QG)[SdUUrX-c[:@C,?1)H,PN8AUu=1@W:X'WqQa;Z',WOr.@C9`nG%cTqbP>TH^DT$e1HJ73^F>KRhok:4"VE2`F;eQGQtT$NCT):$EfF+5TKPml[[=4a;llhU<o58<GZ^/+Go)Pa*q3D,03M9*9NKtF`[%\R,Q?!mFgM(sV7cTKk&\ko&9VObBHAfl<l-5[=9(WrSp\QW+'cA>fu7"diW6d1mH:YR3)$.Z"pQG91SK$4ZU$*i%A\<Igbh8Z;aW%Wj,/Aa"T13.5p_s<Ii1Y$N!F>nOb^2Y$"3#VnO87lg%!JJKNt]^R"Q]HB^).X"aB?q0Kfs2Mt$#R#O3c)EK0.b"%T4ra*AZi).3J%0APb5j\("DH"<!,AUV=6Le%8-?3M=u^3,u#W2$[mV83JAqMjKP."'Wb,aDUZ],PLpGQ#BWM\\2[ODPs6Y$\bA.&P"!TQg>Y>T%h;%DpZ+iU@7rTH\E(anNPk'93<A:WaF31;#S,oQ\go]Ib-591IUb<%J?l2L.\T\]^*Tf\WYaYid;X7?,-$2Fh_9DfXlUsYPJ_#!_CPI%Id%N'cVX$/?,,$'9#&o(J9Ut?1X6X$Jdt^,C\^h:nWBR=%J?l2qE[VKSe8X$Qi=!lT/TRm^?_,'l6^%-p\h7%>h5-eeSj[GpdS*O%T)Ds0F=afq,C%fn4eSN[F:\&I?[C[I9L\53n+t!.<.\3M,-Nd2r2sCN)P$Z(?]_0BE-Ve?f.UEsjW\?hT^V`r`bC)5_5sHkht9W<%\.2T9%fWV<W.(f5<PP\`Xp0:*0:dX0Mep;Fl^,37cB+5[nZH5FFL[D+pkH;t,Q&V?n9#93YPRp!bn9uY?[@Mf3SV!WGQ#rIGujN#%r4@FBYPO6U.]ld$7]nG6GQ#tMc-\(o6/V?.J(8Inp\=SUdR\_GDs5Ad`2e>3H&o/,/Y1koL@09aqK[rO,%64Qf<;7-,4qn-W#-HD%>sH/3Z*4!5;O,hJRZkg&ID5$6VWM-uK=sL4GPt!.pY,LM^MJ%r_nPFaY[i,#IB[qoqTHF,H.R!(@X.FC?g)oK26,/Mbu<>sIOVar%p%>IpJfNfc5h@GCi4FI&M,%>?V#fKH9.H"/H;Q5?c-q%pgTDOm?,-C*b!FqX$ONu==8dlq*`V%i9BV+97ON,XGQ#r)6P2m0nm0$&%Jlm:B&,356qQ#'"qUe(%qP>W,9SXM)]7*n*R,Qop$a4+5<PR&Kg-4Bd90XDB<,lN!f.[)Ai0k:5.a),<_nMBkA9KSIB7*,8Pqj`c%V[>N[("Y',0b_$;HK'@_Cb[-SXP&eVo]B(cgD=3rQPTs?nK8+&#m;PNT'G[&Ae8B>fN@[DoJ&7*R5uacqu1-QBYWA<)=>tZl%diV%b$8BSPPOU]?F?>lp@"PEo:n4Oh=1@,jf?Mlj't0Adb*jI8S.hjV_^P_qJB]TnFV%<5LoQ-2O>pRVu,pAmaL"k_ogH3_r#g#;r9gP%hL7[Re_g)g:Odk>Hp6;b*.4:6CmBl:2q=>ET1f(-dED((_Yr65pQ\LSE*AcH[EQatnReP!.;4p[(J<TZlfU)'bX$75II^qkpO;(D%^"$;X59?<nZ#qa4X;sIM/C^d:D,XYFdPejhgXNYYRYTVJdGaOplZ%3Qp$mBCW]`4dG`*4Wj->p'mi+'@hVf2%aV^;VBcH7'9rn5s%4+Y$7W"CPApps:Mku,."rdAj1IrfUPYqDZ!AFBe!XhC@F'C/f1:4Jm1JtCb$H$'V;^)cXd`6FRlo]'"uEr&_nicrmUG[;m?T5O$k%rArb;[/<])cAX.]Kk7jPQui!dr;j?ofkc^fm`^Zu*e+/;@fba!*%a[_n:%C;gZMYs3TOC5Fb9KpfAtHBl(c[8fq$7dj"q3\j4i;b%q+@J>]ftI\\!=?1@s\Ae#J2M\B3u0N\"-l]1VUQ4]]i4`gf8jj:2JBQNO?rt%CWAfWj9#)Xb`U,1[DB$O3Q\XcAoX/F8g6`:joEF%FBk?fNV_,9Y>m3Hk)>es]3276H_823IM+F\k4$uA?nO@0biQ2$18,.fqns0d6X%I;9(XK-Co%GfcHjk0FDK@I3ri:ecP0c'bgIk[%o(2$ORl@1E4mi73b/;B=r`BQJ]r)?^<dXck^6hs9W"s9i(RR4aI!)=DM6G(e(CuGuiX8KV@W$5LGOWR[M.Wc+m>oj%Ck`kk$EX'S%cZ3<=25fBcHCNLt<oHQ#IAgSjdYkj,m/-RU_/S<2/-t$<Alt8O2]Zi$pbJb;09a1&7=63>9:7Z;4&lC_eEGV2]tSn_Ir_phmoMQ<%.9bhRF/EtsqIIIP?YAV-UZBW,Z@"5/]kF66:G\S<$QHF$l0$3@G!;n2,`#,@:s$T@[U-N*#E4p-I(@**(c;Jl?C>JVSiL"g3D4#9%iMue8Y/kcbl20^IY/'l-o#b'_C$rH3pV)(Q-/$HiIG?sh;u\a+(X-"=?:7NW)rkgGrVMW#fRCM_AFiUCB*Nbc:1!t1qFR14fI59f%pa>+<7MIaJEV"S^0n(cSNJ_`I%&Q,F\bS5D\:9br"Lie<PgTD4\GLmmj'PqF)s8$l31!i(Qga32Ms%!9S%JGr:rJ<S!c_ZR/*fLJ%FGUmiq@&u[n#fXDDp'DAej!oi8$QMMnk(RuptZ`u!5Urt@WAYEOI!L()eO[kkO0NMB$86s7JQJcNSddTFK]uH[&k//0i*+>'E3*O%R=qQ!T3?mcD5_Z`qB04FU`21Xn";n8\(G;+*4qi2LqZ*C^P[0MJGct?$n;1l0D*qsh\D@kV6GXC46Ti(Rh8$e!JB*W0eQHtaqZY)%o4dT;r,kr1rTQ3SWO(ZWDc_EOXknV`qR4C4nCDsn([$<bZ$dFej"Y/n\'BjPXRF%=MN:mmRN=$@Z,8>(o1U-Ta6p[DkfH<HWt9]H%Poat;=ZkNMj%@0t4etd!@J+o,filnXW.)Ffe5p5fMY@)j"=S^6U*r3CO5E6en334Cp$')nWuRZ5)dBsCO`Af8h<HOje%X^/::;d9%<>9Ut1Q'')\WS@9_r^<&irY:PYK4+M7d4L/`Da#IK)S'R;\<'&6Yl/>*;VKUK8XOR(:X`L^A/IV*:pa@/>cL_:"Mq65ZIsKrGbcM%PcS'J)I:E6Y#u%DRI#uU[HmYT&-k7V?X/>DrJP]%0#j?F%<eL6C[I;@e9^UVh%joV:Tf7kXf^eu&%o35./#ABFhKN1IJ#$coB;$I%ImT/BjQg;EHAi+[k"P"(NF)\uXGS8)Nohco;T;83hEDZ"\<\Cj?5>`-NW]q<f65@b&j_\r>kq8KEY?lfO$Y+ZD\EG5a&of\lB:cb%!mfdMhHqf##nh(S.$+BgMspc%0B"jrK.H1('>$b1S-[,iY4=mWkTG]mG\R[,[IN_ipO4)4V4pe2&Q!"'&:RCp:p<HXq`tf_Y]7?5%*SCs>?*`mS.JDn6hd]LSPZ3qgBH"nE`T:@[[O-lCRKff-(i0WY%;rJoLLI3)Xpj`R8OH?Sq(cB&Vs`prH*.9W%YR11b/#>s;<:Fc%795Es&m'r0FV7QM@u-k@>a`6pbO\N5bS!D[dtK1WKeE[>m%WQ5R*/kc,Zgki+kRZKmrtH:I&UtdTAGH0G[A;T8s9#6_C![u8#0E[%*_Vo$.>-\K*_Sqa^ggOC]VP,N?ou)e<Ur^&lUIT;fKdn^H#191,k5"'(`8<&8!2au*h-?Jrkc]`["!fB9LgA#E[#.m`3eUJXCI'X%aO;#;?htU=Xpd96k!VsING3Y^V[KY`fMYK*ks8*U1A_u>)AV[4?G*XEebt[d'3MGG"YOaMD=cm:YiLh6RiB@u2hSTql*Cm29?aJK%hNt/11AquumA6Rl`H$[#X,Yh-Oam5V^_FV%Zn&,rql+cr.CWsbTCYM$$Ff3nTDKBo!@DV1Y]k:JiU-E6D:^g4+6J_jP$cT2Ks,E/%ECTc(2Ha;o^8T?!09!=-B?S+-3u.RF3P"X`)LQP#M_BOBcP&<aCN3NE<SD:iB9b-7T!rmcaNi6W*j3UtM#7+r#CLNcj,Va8jg-]:%o6>stc4po0%Acc!FH`5OaGl0:d[8Dei/n\FgpGGhW.N5W$QZlU_OkI%rIQUrjnQt4Sh_Gf`9.GI<KQ8pK@+qS0+%5#kiEU3]^pPh%]i+b*C&[(6l>6(`L@n&n3\Xcalf(Q=lA;e7_mj$RKEYG,E'/[ZL.5+qotL4Xf&k+Sj6QQeh;T8am)oc"<sX'DX6ORP4l8p9NjG0#%-<X8Ml1Tr2)7/*\^-/N9(;IQ0o\9>8&q%:=K4oDhp8>1Vmss(m\ZM:9V`Tf5n7?u.+cLIVPCc"P.bnJ)FJT/5IS.ns25Z]6QhY6c%mS$`2q:3eGo7hPcIN?'W2\8!a,Vp_BVU@V+PW(c-hc.1"$Ld7"Kl8Hs1I\e"N5.B;m[<'T/C$3IJ!P,@Af,)@Dn2/<s&V5VG]'mK%>)s2TYPHl,6E[W*U[)QrGKnB5U[bb^YKhI#rpeE]mH!I%Q.=@KcAlP@2sSZ"7\2ZHJ%9$Lb]#c/%P9ON)N*<%i46P0Id_2<D,6ZQ%f%0;tb9b+<7]0))gg7pth?bSI1J:N9a%D-ErNY&5O7:]'qsrC`a8G2Sm(p[;fUR+mi2I;-)^kZ:\`T<OoA+]frd!q`B%-]jC3MCM%fVQRAe_.FLh3C.<^#X$[r`7llI^dT]>1_Xh\n%'-@^Q0H,ImW"@\AlYB_oar*6Ksf58Rh9k<Cn5nD>k<MK?1FSDPsuZS4;HC*(9o%5Q)QP4[(NYc+SS:*h0-qI69h(&RhIm3\)9=,q7)+_3*I4b;J%<;i@!tLV@qO6W/5jZ`r(^I+N4n/\55`4!l\-K[.VPIfATlkf_YN%'usmnN,5q.(-bd,W62eH<`(k&mu#*[i/@DFjWqcp=Ra;PX<M2(W:FS8Z`JQEj5];pnAW+^'Lt%l*GK97>:VMP62"7EHYZP$2EubC%B-:osp&bW3Fek_TRGfOFesSf/R4>D$X#"kKEHuuF1FEM70QVh_Q/hfu3tS;*0A>pYM2!2T&)02Do7EZirUS+\(o&oj/d6g&*EpQ&%ok;*&.e?u&k8,%$9D?uocK<O.ZT$hl/4iKmEDhNBRP#lgqj/[q3./9Ri#'csAQPHTc<")n4tZ]4rc\%m<kkfOIUabjg=8$YaujE<%^N^Fn1K1O006M\]pLfbDPA(H7-Y7I5DHsB3fVdHu3BK`^jJR)ti'h9ohp$$1fj=e2IGUYnHtdL@Cj&@T/!Q[Ob,?fUY\G4>o]?/J%C6<pB<2ldaTq%.A`!OEOl+m^kJFA'8qEgZJOt4E;J%uN+'Sr1QF>3k1"pI_#b^f16U,:[p\Ts.>Ap\@&[/;dNbY1LF%-)SoYO&L0%ku&_t`,r6D:Z$Dlg,l=WQ[#B27BOueU1Cdu"OffudTLldQ('Vs&qs4`L&80t@bSiOb1I6=qC#caage"_WB=L/at2<GEHZec+t]Gr%DsYL*quMEimKKjCrXXHt`cVO5cW(:hpF<-(_3"D9TP*sla1:P:jN/B>c1a*?^>6]^loeV`6a+0bF>D<JGrRBfLt^#E.c1i2O>@a&%%T!V42:',O/4-B_g]eYUd3*?U04q%NP\.S>3\I-`k:qN/UKpbpbW]o4:s;ldQT(.b<7/H;jfqL`naWI;XWS\8S;tO_EeX5^k%6oR%cl1qf-%b.9icnIrGUt=Y8]83)CI.9qEP4&=ITj80J]@#^Qo?_B+35cWS;ZQA#5ur`1$MpO=Q$%iU:fd.+2i.N-H&8Jr-n*'6O#k2%nF.YG(.=KEa2`dPKe.e:V9@QDXFZJC0F0,4_L"M'^LBYU_,\[k%7ibC3DP02TiCu>pG3pYGqMJf]#lNd+>uB^OC5WqhGduN`Ut"/%!'%N]W1Xb2lGm``lQE<?#`,=r"A;1;MAX@nf;D,@.2>9#Jg(;Kk]8Z2rM'WCR#0Q.Zn>L*6tph[1!$ESpo?ME9V\,fXjnP4l81!.%N.I6@Bu;]kSrS=+7ak2XQ87gp[(SUaSLY,,@X&284.CaE.n@f=QJrTO6kL>)'Lb%"E`18SA9(r-I!-p863NIJJ7=/)cngb]mL7hH%;%uKM_O6M?X$+2)<t2R<9ZqVS(;t4R+Uc\8-52H:c)QpqlJr;O.-?9Fo1E0EZ,(U2,r:/Z*pZ.d%6G"flJr;)9uH11%)cZ';4,%@%gU=M7!+nBRTs\F#+Tt86lGsW!.j^,_Ben'j6r%9&=JdjrE?*AK,,_PtO[Zg;bP%&GZCtjkbK(OAliZj/V9SqaA7gNoYaP/&9u7ro%$9%2rRY3ih'^WWe(J_ggFUC$GE_I,>&1Q8ALg;I^,a5j'YXb79c2Erj,j\C+@#mFL4#R7(=,9Md*d%fJVH\6l@?3GQRo[9S$+j7G%[^#:5n5i2"<USc.YEI`l.^f%1q5^=#MU%Q<PJ:j%GcR2ObNQ-Es.?.C6EYi)Umm@q4#MPQ.hhu(g?<ps@0?C=XmtoU\mP?4dE:^!%p0S:.MuUA;?8oO0@G;(7&A3L^/+2"1)QgYYb3ss/E`6+XFk.Z#S]Bl.Xn>J=*^LSIqe&"Vq>!-gHNS+$njOCUFp"l*WtL/hDIA8Z%3A%uQs1A%FH=))Q:IdFIm$j#LqK]40R[.a#n3PNObJO:7s-PLKZECg"L#88p9*6_,QDm7+ipl<mf;$6C]]#?'^3Y6/U=ifL/#Vp:%6#Ze=+1q%$%tOZ)>PWpLeIO6]LBBQY=fttP*S\[TY#TWSc-=#aFNlHXNc%D?^4\euA](_lJ;N1'_3Ej6k<<q8+#s'TR.s#YR[+su%p[a]QQTa02TML5d/pt#WX/n>N!?o0o2upcqR[lB2r139X"=TqR<kb/h0[h[ZY%L+OL?=b,%=]6#$[rI;*QDhDpu--eEsuUg\l[HV%c''B+*X0d\b,/d\*#&4GkEIhC?ib-UgNYsndD+k2D-X]a1+")E<($L"VGVLFUdH+Qq!EN*;Fg@%-n*(XkT#Pg)FOC7=<GHSTJJrJ%]m@DP.jABRX()\UD;\$T-@BHQ^`frQ^?#>L4M>Rc^nc\kI<c_>_mP%/fL/HIloP]=_Z;AVSd&/[>IH@-8S\=H]/3A(#3WhS\,\E,%3j9WeN3GHafke][-#q/7B6t%rpn!99&SCkT/\#\D[(%eS"#dMt]!1&\SRHeTh9ZuDp]ds]!=Q)6*c_6Sa7X/FL0\tM&,=8OE?7<k%+,<I1KOo=S2LHH8b#[<*5]FN#@GcB!0$UbS2E2Q.oHXI"&cjO+oR75=ECm%RE6jo_;)TuMT^V[LKUlK$9cTnnP^Ue3!=-'^E:!\e%\1VfX#s6_DOdO3#Rd9'0%E>JR2WGYc#OOm"a)iR0L?KRA6P,"S[]dJ_'3NWjJRIJlDu"[3fY4Q4%0ZlDFB(6#KINB(A;0L,:-;5'%Yb#.O>h`8e/3mSZW1sn851FmRJs7,R^M:>oKOCr[2BCT+Jj,2"9Z1##BP7BM!;@q,7eQq%2'#1m&8Z"DRNiVd5@uYEj[,HPG8@?@%P_g"W]?I_U49AcXUh.A_Rk?sV%3=1W6PL:i8PN.XJZ\;BR&$s#J4MF(Ku*u/D'jq1B`Nd<gf9'&KLqjcIi/M;M*2DREXYhs8sg<D%E_^U..2F4`TEbo/Pb]H2_KJ(JJHS?B/!P54ZKW<]*efK*>;Znf9N/_p%fgTs,XsHn)s*:NLLquCb)BStO$4&NbgP%o+Y2d_&.hNm%n4/;r=C,[0!Z%jW_o7'RelQ5q4<VY:E1)5**$s_]#?/-+&4l;q+C`.O!h_68>S5WTVIAuuk:7>N;pRGUB4j4h?S(:l^4AVFW)nft%fRGPhYa\o\h-_N<&.p6/9J7YC//sfpK"5hE)/q\T)FEBOLBH;Ws$^tJ[r$d9GW_age6l*<30](C;?i@E37?^fpO,00Cm'rP/C<WX%W5?!j8U.QDf!ee_J#F))f*MY>DScVpjci?HBE_cLJ0$#!WL8.(*loLa`WXKe?c0rnqq?"$iSN&Z8a+%;Cg\"lN^Sj:j";hZK=V0U%(N;]s2BF9"YkJmdG[,#^B`iEt4b@\-^otok*c6KeVIm*n67%YpQU1Xo']Qnrkce*E"0GfE-Pm?7eDU,A!@l#RU6%,QW<;5@,7URR%43p9Z7\pU=crXr170TKH$+cjL]..OQ!!Z=_$JXK)%F]E!dbqKH[2$,9`Ph:G[XjXl[QTm4GgsP9j@Rc:*qG-KW2-*h&XQ_m%13or%[\A.:)O_cXNf&m^P6OTn+U9Km62e_)oTD1>A0BTVp8c*d6c@AG2FbeI^'E[!SLDE8-7FSZ65pG8?enRm"5D*'m3Y4?(UXKT@2f:o%SSk*<W6bb9(56IA@3&-"6Bm$1"R;s"Af?R`,3'QjX@tUD<5QH7Cnd@@9G\/"1/^e[q%L!"[buYIH2&s>OnlaX]KrHUDWX6qK0DOA%!oXQp+$oaS*WeBoBsX)P1kaci4?Lm1#.h0l<+u_d(?+7,<.f/.V?0+rL:?0p%?Tk0:As];<-+t]a?/Z_[%_CEFt&eTW/uR]$(<R%%(9$I93mbu&HjN/=$^SUrMZ@IH2@+p9@D*3\$lr&do[%Lci$$_[+cq^("%Nsk3*^E7blKEP0J#7IWMH;;k*^JN-prd='Nd7UF9.$m%i8Lr#[Y9@3\rcsp^=G-h:#T@L%+J!]@<fjIZV(3T"pR1u\i(W;EH!I"c<AFC%MhD<$^:^s\3cF!8.W0sPRoN[emJ^8[+K@PV1103%4]!-X@ENN-=Q3^C@g?;sK:Nku3s\UqcY@Uh!iFlZ?,5$!B?.pNMS[m7(^J!qjGM(:`k^Yu_,+sRLZ1R^3au]@YS]u_'&hQ16?Sq(%BJ$sEWC^_#5(eDWA2)j26855h&+g&8c2Tbj6<Ojh^4U0o$H)7+q\-EHB0%#ERqS&fbQ,U1"I$ShH0`(s)\5ledPYC^!/L0d#DLY/%amQ_efjt.>D)cEPhR3Wo#S/<+5g9ugO_MG+.\I9/(3onZe'UrLWmV5DU\g":87bdD/otUREs`>H%]#P4rs1qJ&+q21G\euS>bjr^%`^sJTKPBX4_.*\0H,KhuLhS7;:dR8dG!F]$!bM[i6E]H=dp5oZTO6M/-%K]@E$Y3N,?Q#8dg-Q>(^M:m##&N=:UA`:+%O,6V5ucB%'#@R<mgU`]L5ejo+Q'I*\4CTL5XZ+Y;&lDAo]G,XK'd!>.]>U[L6kbo_-d>U@1t)4bHV@]32@p+bgo8i;1oJ7V(IR*4`DJ-E>i$T%!H#g5E+h9b%5@k!E=E828]sib.6mmr$gQ<q4&Rs:0S:5/,./#35YZhAl!/dIOFU--0taRV24WFb[R/Pq_qZV`K?c'[!/@?b0Xe0=%[hY9a/uVtt(mnQoO/FR'hT%gb*U5JTP82KU[Li_#??(\Pnr(>,K9T^]?rFM')%TZd`d\m/$>-:L`j49l/&DfT44A4M'K5/CL)$SE%_bCV`6oL(He&*kI:lC"6crWn_XkK?[Jls3th6:qJ4['jtSmSB-EA7L*$?"c<ZG(12`":!@h$>QPRs[(C9P8]Jr,t:/T;7X)rAbAb%\On:O;lJ^@ba&^SCo3a9$q?I?;9oFcPZSiKeP[O"J^=FM?3^Keq$qEci&lW@4J9TB;XL36;3r4?4U4/i-#^_7/3jPZ]4N=%.hS08%r.)>hke&TLnHu],o4nUF84&P$#T2oDZ99K\IZQ&XEJ:,*1PYCFJFE^sJ[,:"+eYl3)RP$gon$cuSerC<DLslV+qkk[E6#pD#U&=8%LZ)EEDCDX&L=8Bl8k]l7qnq:p0[OQBiPEMHQse$Q[%g$5*)Ou'0a2F4YQ^Juajp48(e@faM+h-h@-;hu[\Ht`j!rjkO+TgbA2KYl%%9BjAR,0&B8Vf-=!HX[1Q^Gjnn(K7Z3M`71UCs]ia9,+Ao;dY5*Bi;!_U1"fe,l'2@5rKY_.%t%@T&kRN&oW*L-_?NGVFApCb$E4%oY`\mF,.<S'Sr9nK]+A5<c`d^cr'G4:g8lM[L1"`lcu7`@WjdneCj:Qm[4Di/=bdJ[$O$rdS5pSl'(ug?n+/>_0@<<oc4>o^p\Dl%LG9k:4U%KR=2=S8Q?^>kOjoYc8rQ<L$:aFK9^!pHj/Z=B=^aa##@S)iR8#I;7?CuX!eq&ik:m>N2,kJi$k*mfp8Pq]1H=j:GaS&+%#Mh,5_T'EDZ1-Z)3;,>!B8ROq*(p]6q/+`2'j=E^:.Mr6UnImP@%QgX(pc!u7<h#1_gRXs9LIosiA:#*B=<D+R,Rk6+4EP>;1Zi<%;-!A(!63"p"&j\b_Kg_Si]*;\54RAe=>4)N[F)@emMhHA.2<[9lY%H8N[C-Xe9Eff'NQP6VQVL(d_9SA<"MWWfK'W\#^2&]DaE'I%fVW+KU.I%PJYd-s_=<%>9-(F$d%gi($[%,a:+J_p1(5>1.*>.g=j]j^V8j)JPCt?j(,.Aj-)NrU.T@2C=H6"^&gIo@Fj2Re4FgT9%P]9Dt5bS.>$o>i&q'IQC#0+7q2BpCdr")OWU'V/GW9Zo89JW>VT`<CH#orSBq?GO]CgD5eR#Cr_KK3Se9:5Q[^o,5*P`^(4<agIh%*P.$n4Z"YI"4N=IJCfWna_%m\JZ^N$+tD_+'VR&d886s;P]PTd>Sc-^7&6>%&<F(#r_C8U4cJZbKm>PY6P,]FNU!^fKX0aET@p`r%\.CHEN7!2ie5;"><Hj64,m<USb);?8$r#-A"AE@PM61<^pW9_kh.C((6*le65WBd@"D=d4UGEr)IKHr:@79`DkegJ1qZQM(i-:bq%kQ/I4ch%ssJ4AJ\+jC#3&Mg%K,P3q,G$l#W6U3n!N?*n8:)mlMg]sXPB/5#),Nh@2VLu1m1Di^Ya;k\kJ<71dHGoVV-AEeLKV5L.%1I;7!35$>A)OMP8,ebH<E<$\?<J78eENd,n"]ARF&HF-jNrfm^C,L`q(#B/<P>Y)mp3:"(Q=Yf2BE\SA1Pd`#Hk^QSAT'Sr/E4U"%P[DRq`524>prGZJ*t4n`TIjSc"$JRY#TOBY+AlsD#/W'VK4$_HH[p>`[1M?.^/#;I"83oENk7ouo*q?J_(]Y[+I:#Oq%UT[Q04ON%FKEK@J9!J1\:ooGWIkIA,P+/rI3G!F)]jdn:.>NAmf`-&4+@_Cd)b*P@oAGAnP'7L$PP8bPS")Y0kRHK,Rd@[cTt:Y7^js'QjlN\%X^M@\`cGI?eB)_9q5]9TBeDko!+L4%+OOa1_LY!h2L0h`Y/ao[m<F:$T\:NA*CZ?j"eQ&eY3@G31CP(egr>j;F>T]P!NQu+^h'kU%pal3[`"Rcsfmq@@*2X4q"Gk$&D]k)m&:5&,Uk<OB1<<KEL-\bE;)Z9,pFT4]D;<Es9<Kr_17ISCMumPrEEm#bJ:OA+'>ud;eeLd5%.X>SjV:#Z>%XXAbaRc'0nIn7i*-Q)IEs`>nO/PD)M*^b&1$K+;"X%q-+')]5R-6CnrE!3sH3ErV%GM17!0b)Cm0CsMhV]kT,2EAJ%$=O^H)d!<gb-hVn"K"WH@eMl"N@b&j*HqWq-h3#H2f8q/B;*]aKX>nLpc-LYFt`[p_$U7"c%=A_!cU=0+IHbn^+^,48h6-I5.1O$%_IWauTcq6,CVcpa,!$N'@V;;WT-!+`=Jin=?lQ$["%7d*LEI_(q9RuKKNe-?49L,9'.nd'*M*YW+aC403mRuh0G*BBesdLK7.0V/%cpNr/;9^4I%3YF-NGhkFb!7>\AJ6CpVjK\b?^i2%>LR6p$p;oo2?jeS#Q]d5QlP856jU0.$)1WLhE\gW9KmTsA*PgaCD=dm0c&cA%`aSp"d$ZF-khSa0_4;]Q)8Sr@C^(.Gdo7]NM:/V#;$"r7Fl!HsN`r(;)?^(idL"p%.#%c^U>r\N@kaCg4;3E$67eU7nhI='$um:k%L&_FU0=Qa[p_!c<&5j_^$G3gX3sC:?(a+iE[2%'4"E$Ya6fAGq<l<KWJ<#),oT^Z-!8en-loUD"(d*lf"S#ci+IWV[JImogr+?Z'%Tk$ZL7=SOQDh\2!RK"pjfVn;/'\X[A#0jBR@@eYh\0ujeD_P,+d$6Ls05t[!n?j,:7`@'6U-Qr!@0W/l+G62aQij,J*eS]NJS6[r%GD+n'_-[5actio,EU!hGn/@9ipS&5S](MQpF.)&0O&O<nE<,(Q1s''tZU-peI0U[fg'T7$q$[q,L)rW;QnZcda"U;SN*"=\(_(T-%E6&Nr4^D\3Qh#GfZ5JD=+?ngWJ<A>IloJb.;^RbuX5[RW7g4DGf3ORfAMG$VVpKEPfd2j`O&7hDF09r^PJN>7+D9,'%Dd8jP(3N6%)nh+1@Xo:]]q\36"q*+XQpH'>Nc>*1A._^0r?[JfZsO&^W,:`J`'O^"a(N:u%N[>e/W*tWR7L6Pj,hWd6n:!8%QRVQ%&1oN;[.rK%%io",X[%+LPdY,/i4<EM'n`4`ZW7JBG=)AH'P07o5RCLqi@3r?&gIqo5gUI/>_TF;8Ve?Hk&9:B,3O_aQEI:4plaXg.(YX4%eJXP%E_;-1\cUnb,7t)p/:3SN+NGa2M32l#\M?D/.RRo<N+[nHP^$?-R2E=,Lkd"AV,2fU_"jLH$QsIK-noaGdN[TMA6<YPRIiQ^8gPX7%EQTd0c3*%@2PeAL[P<ZbG-T5r]'7.6p,^CeEhu#TaB7L$PL.+P/5#_86jr-E^jnSEQ&E\hAP"&A5_LNn_e>DCTtMKQ70[aS7<0T.%%S%[K&RoFN,=O;`M=M;ejg7K$!am@df7c%?>U5&M$=IJ7B/m&?/mqS5B,e;5$H$83,L7/0,0li8%*pASfX<)%1'VaJisn?nVYH'*%&Q@nl!(<?H#][*h8NC'*dE[n&0FSX/+FJH*@m5dPBsr>P)\e<R/[^jtftk*r$3Wao*PsMc>Qb'K$^;3n6YmuD<G7^"N3`8H6A#TA%BYnJD/X7B1J=c#(WY&euBoXh]."os5&5&8ITTWl?<&"KV64gqi.YdaoY3EPrWC)L0Oes(2IcqRA;8rq8&0['HF1'F`Q:BId;il^-%M(nKB#^+Y4(q,0"@A'o8,*e0@Hpt:D8HLGWq._F>l-D[b<Zj_k<a]1g7Ym*H-)$K#Pn$M7d+Y`6=-:%.NtBM.CoRD4)%tCeKopnb%>suTGP/'TqM&]r?(hdp*mo5L(ZJHSW<a29Zj@\/r!e^TMJli('KsGA9b`G/A!s^<b[WG\41n2kZ^hbcj.JP\M#822!@eMP:9sO*t%7[g9[!@bV@C9FoWZ*4KBP)qPX@6%doV%mUM8ukqh/M's(@E'nul2/1Hm9^9E;>unk,pNgn'LUU&#dHMI!+^$.iIIo&Q56dK&N`GQ%D$hg<QS9AM.9.3to.[4GZ2Lql$lIJq>%,JiKo>FE8;Qmq-nseF0MF%)6k_`Q=WhIfNMU7i@H<XgrXXTgL;!)=+9]tL:\CM+bg7q7%qHL0ghiSrtr#8TP=7t<UI]?tQlU\D"U-?gYU^'FWUn:2/Tf:*0<d6Ua6DDL,]/L^q50gf=2Jk=)\]ARI\oLoWSuO4W6mqr]n<gUo%4$dmE:'L9A]PXE%J=6^X>mAO.[U&I5&p5r*"?arWp1V/caO#KK\j9Vp@hBo;V2QQ2k]l7B-p5kA9=tH""Gk?>i$sG[I?FjQ/L<E/%)cF_aKDk.GJh\&)q$sP-Q3f8V.crI,>e$668_PKC<GYVKhu8OSWQBl+X\:9'oT48!>aOLR@?)e[@Lcggr_ddD9p,aP[oVE?`3GdI%fcE+Q*&>g$P01iZ7m9);KVVE]b%6ct^]=olQ]ctZ+k"h)EC)iJF@"WJ?ps+)2E,Dk=Y,4"k-DX?S#%HWj?\GT%O$)fS'55R;ZD!M%i?"t]<tk3Y`\';u+OI)ZqZd.n`I8SGL/rBi/EA'^Op5FV(E*R#!sC=CJiPbI[dbY3EIg`LbEa4t5[P^NP>@5dM+S=GFC\b@Ou,=m%\Qj!8gp/h:=V-0.#og8Tg+o>_GW^Ah8`RTfQnO9S+fr4@#]0uT5#N:*![fesKoQ`:X>qm`DafILM[U.t3[,`ig]Ek=5ep?^8l8c$%GYdje)GCLPORj5uW@ME<#%mj7<77]Vc&V>2g<s!eC5a5P,1kd;%FJG]@4k<9>a;#uE4b5d$6fe<]a:&G;h.E!4$#HlZga<U0n]SM%(Q,,qXV8JuAWD%B;1h45&gI:\&n\K81^+O>C!c<:IiQ?'ZaS*h5McaTN=_faT_'"M`/k*?1$n,bBZebYC,4lRVlVUcRt.4$Q$[!M%*nHDa`Fl6eaIB/:6CZZU<M(ju0V9qqUo)iQoM=)H'hg)&kYK'I;+XGnQ]Kc-'XIV+i`pVn^A1)L?W1AM,N`lIDBgVB`L1L6Q`n;1%#u%;>A"Zlra!#Rt&@F4CUpSR;j%R97+A.+b-:T:83F0p?-d]-el'EN3"3.TZ91p*/2V[<C\>2JPP[\K;A)3E33^rF%WAN.+p]7d$%M+9fN&I+LSm)6t<7(Dk+q[pM]5Wonl-tjbob].`!M^Agh%VU"q8ON9*-AsREN[f^M##?H$Ys/^C#ako#_#c.(71hTkWH.oS!42Ih%,_V'&U1:.Ma@u57pnS\REUc@Lb"tTqM,"=uL9ocH4B:!924oSk(Mgq6"a$LY*Xdn2&@Z(%#s^i+iKsbdf;N"]JbcBT^dJ\GlHD-j%pF4eN5]m'b\H3%@$P-6Ofo"FE7!X;S6=bQYL7/B/G7C1TP&2`OeSRc?dOB"TY-j[5T+4;B>5=C2KaAt\!`YkuCnmJkF\ZKhQuJJD%`fa4V$D[k[`"+1/gIrrhT7C&1>cm0'R)uLF:b\TGKh%?nO$bml=Wg,>_V80D8&Z_r8q-mh7O9b!?%EeNYkG=?<.lcDk0IGC,bF$5%&r'g)*r#a*C?qIEW8S<po@Q)29F0#Sc]d<"!Faq!Ej[F"CprO7-37!?j"P%D:>iM2]>?:Ki5<+OM-u(_*)nSU%V;*?/n#Ru+a9O^%4-Af4bc[TFLLB5?ajR7M%PWiH%,V9fn@r,Q`+C0FTFFo3O>AN),9a?G#nu>2R-[A"`XZ6npGjP,i@nU`9/Z=g3#"%rjCU[jLBk75%6j][q(n/FB^Ih2`PVO49PenSdWhAGS&CJY=,"c(Y,To^/![^BJb"t\eFQ3N'eb^?+#Uj*fID]Ic;#[^,"0#ts)2*cnHkokXX!$nM%O#\#)O6'8:'9'7/"B-`TNFdbDe5nN)s8?>)\eFjeFc2='0t@COZ:#6j%Ma#VRPZWn>BI;YAF/l;#B9iA`5\a0Ds>JS%B;4BJ63Ro%A]gBM;'3ujf^Bg&8-T?e.I;8#A18)Rhd\S`WA*6s()t^#+?ZN(XPTR!.EEV"=U#rpKp%6%QHa)</gR0rmk]QMWD_ibU'`<5m2u]E%:+I7i+^k0eVC=4m9/$(:CZZkOQsV]Po=A+N?r5aeR6)h=0o&tSBGa^#7M$*VIlPB65K-+,\o"_#CN>dG!#?ZN8@m4T,D@Nc&J:(W%p]d;@(oq$p7`k3bK2L_<`aV%>/OC9&2t3[J!V*N>4\pW;J[]MqGHUBjgOTtXBp?'(5jC0d=6J6h]G3t6ST6Oi-398-#oJ]FTPG(B%^^[[PS/t/3\nK2$=q$"\pq76@^bg*YN.OGMWZP?<WW%a2^!+AH@(sp^VF6'g-X`XZln![k)&oI9WN@.@\Z9*F+A.+r7RIf%`0e/K%<Y+?YE$5QMT.r5W_A"]B7aW\J!aK*=<<somgD1klLZu=(be/N6e'MdlU-B,rf-u95AZ2_Q/Cq4/9ELs\-X^C_!g=IHFFJ&W(^;d$%.9'Wj0_,=nD+uWo7=^W,9]c]b2;"(R3`48E)e5+5=;kaT.OG<CKU@9uh%O!8NlV]JAe<d<#U:*,P\;?I*[$?cXrcS=TCQ.\68PMf%#9aapQHu9G/DMEm0"YeIYo8DN-u%?33$Q"E7e]p6jq+t-Cbs78Gh\6sW0d]Uktf+5W!&u*i/u+ba"CB=3EX_,q,H\\BQ[PN$-%R_%G`@E4a1@:fV&0:'q>DN@6!@?2$I!$hY'kn!7K^Nk=sJpLUB_kaUurnSi^XhH-?h+)p3]*?AXiTg`N3td-_!dh7E80Oan(n@E\JXC%&$Qk%iB`GG.aLA1JQ8NV)J(7$!@Ap]QsG8g]$Gh<fr1AY=?l%(8PZ+E#bfXFR3Y9q?GLM74NB3'j>*XK0N:jD*"'X#POY/[3JqLE%=f1d"Cfu!tj)%pGG<`FpL&f*!Nb6^174ULl0Wm#_;=)+*qK)HV$5fh3P7V<l/rLAl1ZTHM!&u@_U7N7-Co4@4Te%FekCk&[fd.%C%LFk>_-+!:)-_.A%EfI,I8=Cu9b.p$u;OJTW_m(I*!O5e0eTjoQ$LJSNY97l>#!j5f*(ck0&12WQ$T!BFX'k`KVI5NhIh\?80Se=+%$7j3&'3j/4"M7e7S@19#@V+<9p%e,O\_aie4M#hBPKcZ@eP52@UOrSQfX+Y$:ZiP+E1"r#G[A^LXsbV*I$Q(R\LrM2nVBIp8tSBX%K.5r-gEYi8iW_k(QYm2*PVLtR<"%D;oI?JpD\t$^$E.J+M^0^,9.D?e+<X'CF:.>e+Q>f:j?Wbi8nY7WKBq-bNFFc'k)$ErWH=eC%RTqT1g'r>:$0%TiJ;[j*%$>8/(cu&*`=a1r]#"o_AB7EgZuV^'aEpG22.iPe>T.]QO9GaK%H/Wu0h\&,fGP6t$'Tc]F[_[X#U=1n%_!"rRa&5T$"X6lH,`E[i$79X).fB\&&arBpCY)NiBgEAj^nc+Nb".m:Q,)I&V<4_RUWdB`c2kSSamjY*,gU.DfWcUDE<W(IZj7L-%m1i=Mr)`_.:'/)jN%SdB>+%ZoN5/uDAC(UL(mVmIG@g+hD?;-77C[n&+bh@#E>YRs=;E28EJKI&W2VB^`go$iPAp#IrY.:&Q>0TX%AuVo&+DF;QEahp^S0.h[(fc)XNkB.VCt:jFds"d3.OMt+Pbf#&$OmLo;Be2D.2nEN_q\GVGbh8bLaDticJ=[D<fDHQ3qm$nQ3%V8%:'opo:f^q\iJ53UMVWW(CTQMq`IZL`Q)u_ClB#@3^a()/3u(6!?HO:oBa!359Gc;iZ)ckA7[QVE.a5B';sk4<+uf!U)u4A\"si=k%7`)2uUTc0T`XO\ccpqm8dXS5]KU5VgEF5YrM>Kr2re+A'E-,-:.9cgIIEtdgZO0+o-XgI`!gDB(6`#$-nX#Iq)T3b)fH<l*'-R.J%Y051H!YAcH"id;_&l0'1Oe'U=$aGhTg%)E`fFU(iXot+;7.r!:Hr'lA0^S#QfR-,FQ3`Q!rE$-H6&aF[QTPbS5a2[/!TPmdM26r#%PhnfI$u<'r!E*WCaAagQaG<Cn'/2-hJ][.K5Z<8E9'2EFKOX=207Ya/bUrI2;-FeI3@YRdG>!KapenrH6_$bu+qTV<-&uIqC+Dqf%JT4(YGG\IB&jm:Fbc\<0,ml+8\n&;ie%T)9:r;%5KsfrS8o.X]aJ:Epj&'Op'+\V(rJ>JPk1PhsXL*"ZH5NI[\QoMP*"n3#iX!QZ%2)@-t/X!L6U;2@k!PEf?X?MabTHo@31._oLg=6Y?'lXi;i[L5rLls#1@4[$s+psJQA9TdD64QVrdU]d(6PQ(s0P?sZ-5'nRH9Ki1%&S-c%(jn#JRYZVF3FEK>;bdm5HFcX?E<nnnR$,+6'4TXc%Zfc2#])*6JjIoeDbIs[DC&A=-KJ*;$t[m)L<hi4kM,2O$P+c)-n0rE%Kurng';Y&h6f2j7bVba?3=80rD[Ts)!X@rV<6o6"jjPZ81<>HB$#eRq:c_8k`5QgK)f&@h#uHJQl=eu+8-4]IZER`#\\_%2=.t24%VOK<E'm]+]b+M(r&RQd0>uj+g3L7pXMJb+:(f):`]\bV#IE!j)l/+TPe`<(R@9;NbTKRqZ59L*th,FB7]Y-bLD!i79)a#jk&oV3U%bg@h)Jg8e<dD83RY\<L!NeK4salHr[22PqXV]K'Q=QPJCSS-9bU@UKP/DWcQRXU#"K,Hm+-)t\7Lp/Re'P!JS*M^p8?s)TJQVq8_%*1=:#j%<mQ=M%.Kd9uJGoabZ5j0I0:]JIi@\T=q6Zd`)U_^!C&CQC'!Y`qI2<ZSJZ5p3JX6A*4dJd&o5%5r%K5k>V\2D?!iNLp1d%G7>aPDZ.OIruK_RSal#\8:ht7B/pT`s,7<4kTWjJiFB5gL5<"pB+UR4bjp@X@22!nkdGqD4A0>]j`lg-37l)`hE%3cFC?aJ&#-(a%$NL<L))q@,^NRV.Q-iQB<MpM]GA*%I+HR[_UjG(5E+WJY.ICHal1K[m"n1/3R(-2<nL.7rCaGY'c-nNC4$@hs"4P&!;ikn?c6)W"%+N1[9G)$VN'%p\Zi[8?E,D\>\9JjHcjN'9HlkUfTG:Fs8lPR#qY/dOLP"t?TioO;kdr[t+GoF"\RQeMlI*[I`:=Ua%dKQ=QZLhcB%)CV1*#G(f'mit:5hAO7M>X]_U$7qL)CH=c?[`LjT3%!P6=XJkD@%ql\Mg'_T`eZmmNY!O=9tC@V"hZ[Y`VqR%$X][%jD(/d%'P-<%e\2saRaGE@XPuNVE7!&IVU&XLnOF<"Pf\iM,a3QX%5>\/D(,D!$o$LZ=Ob?789_HCAJXtr;dQRCQ.M1VZ)68L/S4V"Gjg]e0icoC%N+"i]@:a0/WA*.=R4Tb25]'F<F#K:YR,%sR!5e%id'&-!0&Fj(g!hpo3C;gBbXgd2R1Vl/.,@D2h49l4[&kc,LHf;%e/mI/*W1ku%!SY<L0LlE'B08!7S0JQMSEN9kb`((7T$]s0:1-8dk8CQ7UE!;*+=C's)hkK7&p0OP-TPa8VD#^+'1!<q[IGZb_pq5j`!@tfGE8t)%5,Q5N!u@(S)pYi^KR.n-YtK6i3n.t,.!5<T*>f9Tpq"f=<hG@JkKuu1(k!Wj1ZVHLS#fk<irV%l\=N!>3]gD#<ZP]R&;sgidsXJ9%HP`l*^ilYc@"b)]'Pu$'RCB7W#%rQ+#"VIM-U&J4hPZ(nBj1ED%s/StClM^]h&Yo4VeqD4_*P'"ZRgHPIi'f"mBY5UfXF%%ddS#`%PYdC"7fj/1CJ5=,=2!+?<\Sm7=I:alUI8/iM(s<ZVe^<0A^=dn388%(rj'00/^kLIHJ*rsS'BjJ^`/$Qi0k$[:l#pgTQQ9SCqS2M%lHOGIRDUXm,nCe4e$Rl_j"N+A2eoT2T3f&ojjGF9#mD"aV5Qpg`8V]IJr9Gbd$;VRlsS*bcm;5mdiV7r!"rE=.iC_F3ueXaR=h(_%Z3Y<Y@"U)f2qVmNUi%'O=p\J+kcA7.1YL!"NJ\WN*`*09_d'CTP*X&s5V*#B$&1CR)%=.?3)!M[Z5^H-;)=VN+F-q!Si_n8&I`1>%pr8FlZ$;X"a`(cQnnk&/:1J%%_f$)Q(caGZi_X4h(AHI'Ou\criK-rQ)WVWQ=f_^ZRUsr#$VkRU"-8boM8q/aoRWIt2Do#B2_^IM%Fc8Fe,1-f0%F5QJWXP3l_*$qGN(l!p%f4[,ML-9n#EdF8C`Y7=1g[JFSEfZK08c^T)`mn_&7.dk%Wbr;6fn(/AnXulR+Nb#3dKEg%jqB!d7fj*",f2\4F=/0I/A02^iDDC.cDd)jE?g%bIX2hd[2CT/]AZJ>L@%S=F/dXc?:l^g0?>l(?'oGn&;M\`gni;(=;XIZo`,Z^%m:&sE.-N=7Yl"jTnnk3<qA;>cD%VisKu?4i3`bGIE*;]N*lk/"@'ISNQ1&\rNUA\660L5)+CR`P((#tkQJFG=7BAm&%hhICn.n(j%l$fHF"busDn`VCQC9WeZ,$#O&FHfIn.LY54]L#"s*8+"8ar`\2V$@0L!""Cqdma8NhTg#jP2s-u:GD5k2ZtDAQ7Ar@rp20#=>gR!%OC?hR'uk*BVP,>j+Z[EP^%_9'aJt[hA/h&,jopOrd<jKJb0#[e=:o=;CtiWuZA-QF^][`IG%,6r-,VG*O3cUB2m2c?JQ(P6'kUcj%O7uN+1f_Jk?W<bH0b>hlWN`k*iU(&RHJ$@LEt#?EKIS/rXY?]ZrM+*tVR<aC7m@EYo>NsG0+>_4qs41b:"HMkj"6ld.WkDQ\1Gtj%o!$Z?l=l:KR!:d]MS:l0d3Ui^k9PND*lkQN-i-Y8\lOG8__Sl9j(\0gf=H91Y1<9NeJc-)FKOTnF-":herfOn+fiBK27GtH#qbYc%15.5<MA(+uHcu0WWQjP'[NscaS)W!JR?Q]CBJA'4elJeDD;3XiXJiI@(k'0G1_]KG@eX`=b/EBif6ehi^.4Yl#>VA%ALe#"Ed"[+%ADTh)XlX$CS>RQQb4/V+(?EZp6'`t:n=`pBIHJe205K>@W(.175m#/CfVHM9;6Y^iWE=umUG"0688g&RD9]Jgm^>aEg`<2UTUD<c%.h2>d$/\7JC'g7=OnY/9`EmD=UE<]WUeKou:L-A4RWZs&Kgs):3pM'#e7!(gpg2_GTntB_(oFiT_X,[EhfHEH;l02@D(ehg*]K6E%SO$nhYD$Z*$gltip.*R^Ef.dZ9GEfVRdX8/f^,N$YOr>HO(fY@$eG0uZjq_622'#M@,0n"\[LrA9DF)lMu4,<Z<fZ)KL+8a;U49P%Z_]*Oc%.<Af`)YjSo(!_#fm\ch2\h%;pc?QAFMR"fjVsQX+M9be+(!ZDq&`uD/%<@SrK&%jZWq'Z9Y<JcAK&DOJ[8p.(Ot8I%39h%?ZK;ifp%?i3oS?0'<JWFr&(fB>_tKA^Y^h2<5U+cjG5P-&1Gc?\t2VsJtdq<UZYs#*(8,]&k%/3@kl4k[MbP&03lsLQ?'2lVR.OF%Y@#%9?QC]'eaBpLe(g9[FMc!KQ+-l4SAPuPpBktX>d3ij0]YjJ0N>j[mYM2=/XYcf#U)R_`.6n.^_+uU8ntl/7LZ:B4n)"q<m#1e%e.QfFI*O[T.@6oMhh`t65RNdZ(c2cU[Q@5a!)"s)*R-'t[C5+UH#;rEd,'S:jU1g1GP!G]B_=7s@e6TdPT2tK\%257TIX")=[M9g%!BnaJ3O'1g_guTL_]'K/[Vp<>&O(`C(-TG60SE3.od:0!XkjhRE@GV-o:3Sn/g9OB7'7*,ZHrbFI(l?i$&)2fjFA<'.\Pn3LrDbJ%D*$"F!#s=hn<\I;3jct:&;nlBU_)]tH17Ef#<Re`T0ZR.1:hEO"usfu7\f`XoG@dE`K`'MT"*@hEYIeW>@D'tH0]+XEAVrAHKcAc%;sJ4(ef0fWCh-Q,8oZpD-,"KnZX0]RHDk5%BRQR>/t71FKIYDBqV+Z4mk(Wpm,3RX_O&NpFl8Eb'\D*?l")[e]BUF>il&.+%hr!"%7B+60Q0):tgQ*:MrC(Pnm=eiT:l/ueCuLMTbiidQ^tjcJUZW:akXo5s>?N:>7P1_i"ZEJc6mNVB8!qKZp`siDCi/I!\%0#m/buO9%$tfbr=fXKc[A#oje!qs+$A4m]C+Z(BCNrE6C_jDr\4a1P>>f0!P4[hAi9FA@s,e*hFOD?^l$:Q3gfqH+*TBO5jY0RE,7omf.RC"%%9i!;i#P;akip"/DosJL=SGe[4Z1Vq)!qoaiAZp3kH=eE_RZu&JJ<i1m-(62bFOJnVq3ubM?&qSrW'*h$kQDTpd758e7$7HS^`g6R%,Gcn4TLE4l<UnX)q5K3>;Q5@;](Nd;+C\+U/.qD+8T>.rc5p<l;XVUQcf:Gf,>,e[bE<PG!LLOKHYo*]7p(UhoA2J<8gic/e1M>N%q6F)8MeO)AiA0%CAo_R%dTbOiq4>1@3HA#p^sM$#0%[fb.@.]:Y9u>"1<Xb.Rsb(:9\1HMgp`M(]/*?V/hMLR]lNG$+_F[hcr8L@%eQ^fpa^`!G.(PT:qfc!IQ:Md[<F+)6Qlf\\Z1i.`:1u-?N;RKKZB*.TSIn83WmCL4NOG?YqU1X\]UB6"HK=g,#I1UI>5%-G/b(]d%01As,.ZkSJYS]lXpu5^T!nI`*RV+R^#qBgi@]+Vrmpuc0,?ps5l,Wut3FXE;',P"*'Q2/?X/tA7I2K03oD=[JnGNj+b.jj^,+H:5%]3`36*AB^D/>r%eXTB]GHMB**TC\LbE]UQ=UMU1_/C`:R,Qh2g.4^D[Z6,Rbr,,:CSr4W0OeOk*,k-G#R_eki.$(No_DQ7/ItI@!%/las#<pM7SS)"!lg6[]h<`14(D5"b`[d@!7i"\q1D`4[u(C$S"2VM:j<FBcmm%P]B1m_@?71g#!!`'^ZQ!0<`13q/f*]qn8*c(EY%%qr@FEtiDe>oSD8.^&>CaI#4)Sqi!D?;e:97>j[,2mjGQDd4%4?)*a9Pj7Q4PWBcoduP*H'=OCh4d,7]!`[9+HkCL:Zbl(RU[@57%CSdg5@\_5,I?=]Pn''>c9WBOMYUr=N@3Q'.IQ<Bj-9r81Pll/j-FE;ljGI.sT4g9X55c18Dgj4Hkj.K_f&CT.?"1)"p<>ZUZJ^(F%dbWt\nL3OeXjd.'K=u]2a_L_DkPqQDhC7=7QRH0i1mO.R-S%MKL[n=tf=iT[^gbR>MY!@(]i#Ckl`=o*arq4q7qj*SGZ,Ej:KJKP%MK3'nb2N(5H<U?3`6$+U)(GMIl(l4%>[MPkiZjZ;,/#AiS:&LqM.cdd-#B,)*hsMS7W.1-QJAkf`,Zt!a=&1\rj.+RgRiuoqu?<S%&&8/;Dh%B/fAD&Q+'thZiiMh,#*-Itno+QupL!ss2o#4[YQ!tYIfA<D+$T\uhu<U*55Nl<rk$bes5WEpo\4PR+[T:<gC&fJ+lF)4%S3EWTNVui+J>UrO;=)DF4$>[S>>`k0V*6bl9.9DsEM]?<0n(bYV>:lWUiS2,RcAidb3?14l,n/Z7`@RU^s5mteX^=^pRp[+J%kAH%[6LI4n)5X/mM":IGf6jPPb?%,N>7+b8D&<n1Mhhh9M;Z7*$B8ib@8Fhp^<..O"K;F=<-V5W:Z;XUg[JBh:4"(2d*@`99EFB7F/to%IK*])A<h]H8Z]Vf>QNr!bsQ+jpdP890mU$[fK?$U=ru;mG9J@GICQ1dXU#B-HN./F+7*7]h3_s5rCc&oX09P.]_YE1.i>4`meg8O%fM\\&]YS'DZIWrTYt3;GmKN:BNsrm$[)a;Xs8UTL]B7i>qS03Kk+\F=T@'2)k?lm+GC(>R)H*IGN*B;lIFNFrNP_(b=K>62*Zo5)%OD-8LrSb.PHt^eac(b=&gt)oJ+)>QURJ?lhRU-B,M7/Q_!8(cP`A3j@#<X.kg@c]c2HL1sQ5";aFaiH(k.1Qn(>a][Za%TXJ085k%d?]A9bNA8m5KD;Y<7P>?<FVB`8C`rsBg+/lC\bLV]kbVZ"<#BpqO^mp2LGI/Rr`QFnARWkM>'g;nFbl]p-3U"r#tC.IJJA"\$Vul%9mMECHui9:i<<o*$NI.I5l53^8Zp\2,g=,3HoMq]lfjEYf`Bsubl5qRp5No.$`B>0rD\Z%g7%:UAjOMsD+PeEO_pH$D$k+4*4sfq%TD[1YM7JqHS1Ss(qS`MoP7&66]tQsV-W=iA6f^TjM=$Qs$[2JC?4<Cu(^>VE-GtLHM-YdYB#aR7lGFFQqha3gX\O6mHSX4NQ>,oN%g<Rte!C@[^$KIG7KI\uCl&W(3]]iFLhGr_^%7YLfoSIDYTgeGlMi)[[PYqH#F07XN/+32,63"1M4Ob`f]a!`Y\lZs_#])DA@+j-Y%I/%JeBkMQJdaE"!gRnpuU1[Tee98R'8]pR(P^tpH'*uUIP+:\(7p\:Ne)p?a:DAaE%?VrniAGmgIoRqZ2B9Y79M7$L.WlqXJqc&s%O.oQMh<O/5)B^7R9Ph\-]Cn=D%><@rhF]@H(81aMY:%AdNSeO6VWe?.q1WL5iCrQ^.(7=-I-U[t<+<>uceUFL4p.2ViWC9IO]8)m%Eltrs]H2fJ&Hsi8qe!J$2H-H&[W])@*i:BeWo!GbI'BP0rGiBFXSgZFU>O?ffk[>t&mI&+`%uo!!Hr]<ibt2B$C_kH_dT]gbRW_M%1n3A8\BpC&gt;8Dh#OqG^6b8%e6$$1#`h9>M[ar%?OfP5ZS=9MP((48a6=6iis3;ab@OefU3i8k5NA;NWT]6,[G75$,ZEiQB+Mp9%>74t=cf$rOW>u6L]ntQ8"!LgRTVP5q*,t^[e\Bl4=_?I<A)Q&i<:.IZR;sPi$.(b"1._p+Q;(emoofU_c3t_0H#fAu)9m0&)n[84%J"AAV_'paS/11c2IVgs':`J#`D=QV%GXVR\$8`?Qn@G5PX\Za0:+WiA"?mUMA):gGc*@T`k3i")W_Ig6JJ[MZm\XNQ4%RNZM<_LS%W%.+]%WM0Y%D>6-"Vg-N-Wn[M](YCX82VQ+NMS!'r$UACN<f40g$;0'MbQss<k#G'A8,8U0]QS^UtGB?'_&p+=R=ij%2h0qKmdn]%W%uojd'Oe\kL[=\,_s.ZVh"EN;P#I1K8&fmF$cdZT#m]KmZIt%\MIN-r6Ci_9ZQ)9PHSR*R2sK@>#nhn$^O(SMe3e2,bXp3"*j1\%0(tejk0tSsO;i^s:Q6_TMqAO%`VZq:K[9FEYNGBnE.KA!iLImu+16*u^uX-X:afTWiE!::e(6>[Sc.L4S?`jk`);R77pC$($!opP%MT4sp<YM2lrN(AB%-k^=9EJEhI+7eW#.p)<=KDP%1>>q/Z4.b_pqj(!IXX':glQ$Crj;h`"49&Z`^;ZdH%td1>'nW2*iRo7%8E7)%)OZ4iU7m18;odQ[hd7E2MdVKNC[tc9=n^kL=K,D'8mJq_d*/%uqp!gK1bZi:Yo@S+(beKE1n?\"4X[/)%e[uCcqG`O(CjEjf$c4a%Z'8&rlU7`o&^?:%Z'_?aj:QCd[T=UN,?tEkf48]D0.foT*Eck.PRiHiUP'[(ME:gkObW;s\Rtn)9n)S8lcQM;X7o"\c8u5+DVt:6%,=*ZrJJ,,lB.XA$_M`2q">%e:)"*];7%4\,`U1F.T%c$F-$;$Z^V+VU[J_/Fj4'-k4Z#?+0>u,#:Z]DOR<F,3q@u&R3aJ^[a5VRH%I],FJR/EU9F*W^e$ZP3kUg5T29@:"I:reL"VMq9oZbWi9N0t%Xc0Tm#h?5\Oo7)'(cL.kb$6<lA`DW1tI_It9`BfPmZI#mYNC_^"%S'?#`N3)pRQM0(5I(DtO8r]'*');u"%:Jldrkr:j4(d<r\^\o!>FkESS[0u_jTnq9Ve9\%(_0`G/nZVT1k\B]2,-.?*5FI.F"V#:%g/"-IV/AOG#N+*c.qQP%ngu4k>RNHR?<Eq8n%f_qKPOfg!6'/Mo6?P,?#8[hR*Y8`+ie&Q"Y:^cD7/*\:VON[/,/k["=,O7EacW!%8PM##hDUSR4G_JAn@,D%*J/S]%fd*Pi%n=kj5jcF2s-[B+erP!@[ju-.eTn\M;;tF-4#<<32..CMV4VIE)blM/I)\4s.YmHg#Hfb%CDBd/dYYpe[1S<C2L3DmUF@bOC\8RWB2a\nH+Z,FeG7JqQVsU`pVZ7,+"7eI5>[t7?2UAiE^qBR[0&Um2DrjE,2_#[b<+`B(Q[>m%fjDd1Ss3[(jjcGD'p%bDKnC\7J_j'!6c?nJUB@`C'L2PDH[:Te%Cg':@KKGf:-JLc#M4)orNXMNpl/D<qAr?%ane"[SNV^tWJ_6#%2k,@Co>'62dU0`A`<o4Sp&JZC"K9ti[\YN:LB][pZIhp&m.GCbk=c5(jDH)Q^@lSFX`bDY\*QOp5/g0WqcRI71JMTG0mQ^Y%Cp<g%fAtMe9IW8C'X9O<KD,sO;CT?6YPi#5XC0sWk[<nanY]aN4P=akl9?U63D5Uk\7c8[7O:k?PgE4\MI,S+E[-4nc>h:aP]QrT^saDa%]*S!ZWdS>2huBgN1/@rFMGtsiZ?)J@Q,731b6tFMM'RDMNVlAoBQh<+)*.;AMl8@GAWtCP9C;]1<]4#qo(i*Qi5d*YrOTd'*n]d^%,@]>23I+Pf\@`o^5OC"Nk^0j-&[H#u_@U!M<WB=U\0Kh`/a5*JK<qN\5.8;b]N.Ps=Zq9^I<2P4o[F?`GeMC+91IMl5Z'CEbHSWk%pno+O&"dnRLG;^AgoJbP2=;Qo-)%]9.7BZ-%(EM1Pe&1n4f(;gkS73[/\NEGF?Imu.,`j43m;Yj&hQPUQtu#KNU4#X#4o7<UpDB-%BD#[tr&G*`p\Ktt_^!.[FjqeC7I40l:VFl>9o!aC_FAX!9S:T:\8U\uZqtUPpPCI?Yj%4Y3<EY/1b21bGR>4+@T[GRAd&=\kEBPr%fD/qFk7;bR%b#$\eromU]K3B'g/PYX%NL7ApYjYh\OEMIY<3_ZXm4/t&DCKD5iFf\7^3eBI/=(*l.Iu6!6:J#9ir6aJBCKh"f9.T%Y?7[cG0R^(3\48QV`'8Us%?3/["*7%Kp<ZLjUF#1%.Rb=WP(pU8MUPA`0TE<"^.heHa'`-60K7Jmrq.la]RU/]p[h7paqn0r]40N%7r9`8g;h+$3u4jPYj;V-lZq"4/G#^t7ErJM"aWoacLNCl#E(13?"LPZLT&NSkFN/n)I*HGnpAH!duf:m[Kof^RbJbe$]4]tR6AY!%9SQO1ch(Dr;H;dQ4f^JgUpmX\!U0n+^-mWk,V5`U>Gj,1RVu?H%2fCF3t+W*&GS'3qnQeG0L!!9>$GL1J6e(EHT8rd)8C87;]%-d%S$>1)NZM4@T\sW)cHf%;oW=5rZat\U=Zb+UO)2AT#/i@-dL"t.k4=e)Oj89?g\N."7I)DI[:"KiF3/2r$=D-iga#1rVf;V`bB@cc%e(a#]HDlLFLCF,FVlttXr3I8'40>Suhu9`V@SIO*/^c;U+\49L\YltE(8F-qqUQ>o;4KnU_5jqHh19=hFgeOL)+u.]$jqXV[4)cF%L(E7N^:r`^ngVK'D]Aqo:V(E'ql'VS9Hi^*S`k8"oa+.Y"5h;`.,&@V6W)YX+TU5?PJk_/5kUpE-ET_rp=SGR4-5d$`dQ0A5P1[3%_amt>>(CEa4S)b$:AXV)o_f;lE">1\D$eD_#.N5bHL=CB_Yc,D#HKaAg'YAuX^RX6'Ge:c.imM]^q+Fb%WhfDNnLplOUM'=SS-))%Kc@$`rQD)7Wb;Ub22f#io*f`GqY+m?8g\IJd4EC3$?lY0,SKSq[gs@sS5/kgQ&u+a8'%cE"mZ4+jDD,'_IS=;%kYN9`b@9DH]l3g%!-f-;T:J4RHDe`m!#L=`4Kj1;">5_pPQ'R^!uJTQ&HtPA9[0`+3c.<GC&lj5DNjSk\DV5nR<BMJ1Y^LCbM0(rri#f29EPZn5Vh7m%Id;dO1Z4"c#OXj4j$9l-AeGA,<1=f/blNfD"b+fQP>ns=40Sm:A$MF"`\KM1k_Do'^l8=cIVMM0AGGt[e&SuEn<Wgp4]m/EJ7M"/%h+2rXjFVCC"NPFP@*Ojt5pLEd@GB2;knM2BjFD\r`]t?\=taG_CjRKKo[R)7/kY/S+8'<5C4,k;qbr"]Mg:q<4CaN*gF`2A`$1*b%SG`pd1jHmNK98TZ'*FO-7M]`3O8TZL/;D*drX;9#V4)<*,?Ro&]:olgVYV@]a<FS;5".H:CfThNKd0\&RNLM0CSnq!543B#fr"<k%,94Ntb^_2`dFS2DLEfnh?E\>/oqS;0h-V?Ga[!95$qD)p:tg5N,DPmi%S$B./*[U6(2BUt/4VCG`=fXM0VU-rC'>j[Re`:#)"F2n%K\XBL_dXG$.i>Nak[%=G(t$48gp+qpTN#.`=@A&e`%)PL"DU+e&UnNsMnVN?pVZY!6BMGOQCZFk:dgd'@tZ%0>S&+o_6RYqY>>AV%IboXs@V3"rQj+b;Y[$?E&VpDg[Q-jL1q_QnHgQr..I;5TZI;p0Uo)M8o[::2F<UP'ZCUCNqSnZ:@tnF5]Z62'fZp;%?>CA$*:Yuj%&^'sSa;a^B]!bpHW]k'.&e<RFo.1=N,]+=mQ[;l\EBF5*PA#?tkU3tnCVK2tCt*W?k_HU]i9A`Y5aO"p+TiGto3U)\C,%^7(lhFd%![P2GQJ[lur`S9D`>XLV1h4h:]Y1kSeV#0MFl9rI0&!6hE)iMJNQaGji9D&:W93,X`Q6<Sqs@TX+JUqu3Ikct9r8]rTImpe%`\-a%>-#)&S>bpBFr-c+^ZbGF9<P&jK]1"8G-Si5F&+dT8V^JX.8XkSQ`G%P@,%"b3TAVVJ;2T8chu,`a6E1a,9jO.73g*fO4lkg>o:0,%]i?.eJe8n/#i-sF5r>m;R;c(1DmI3]-b#].W.i=D[j_$#,\FETq/aS$UMegR&=L$\(cg-oNM*<S(b-5-5#od(hZ@[k78bN$h+(ei%KCCXHc>bPUP.6+me6t)A2TbBanm9ZAnjHoMRkNc6\rG]TU;qDt`TFP:/=emfWj./a\3(/$e<+TN,Nes]r1;/^?Sg2HJkjor6Z=e*%Q@H-ip,*WY,^I%o1]e=i9i2,2F-W.*c6chueMTDNFT,EA,JBACVg-;r_N)@M?K3;3b@f$.qkfGtkRoZE$<Si#k*=9T:g;I^!BnZh%a`4.:Mf,H:.Cg,J/=+nE+E;r16MMH6\`3<SG<;;dZ=pXrjYL`E511YN>#/^:(>IO@h@b6$dj"[W_.@iCV^V:gj"8fHML"+0>WJ";%C9Kf"bO:M>kKA]9p+d!N.F5d%4p5H<D*ZXf,(Pjc#W6:I/SDii+0VS\CN),6`C[2<g5i@V+qD@QeJV/09V2Z?J!-&;@Y_>`Hkq88%1Dje37Gu@&<HAn+Vd<fhSjhS%?RUPH'nO!K9=#[.i*,4&hF6A[Z*dOgoX'4]Wk`+q0Q:*E`s.$6<.TBBC#l#r4K"1Q4fc@#7o29+%WkaVF&RDrI^_aQo!ouJD^_m=K(To7W!&Ca;nYuY'4?[QZAZEP";tg/m">2)f*U?].^*"Gm0#8q;k:S3$HIRKBdegT22;hR`Y5,!s%a6%GL2;h^h_HSGj?YgS,N^j\k-C;h&!p;<X@VSsV3+M7qq^;O?#0p_jMnh-[<BNI^&ADQJjsU:T:o5^'GLF,CVU&<GmdLne4DMZc%\D"=I2;hTRi#=Q3J6kqSq-=)_:#5P@!tGI0Wq99nN[8..J"[d">b-GS2;j#@+*DCm'N>'q2oi$<>$>.t<o9ob0dWGeM_68=Vo3Y.%M%3@W_F'ZA%4-PE;&gbXhJ'/DD"`Ib^>#]@T@&qA)K9jXU"3`"n#;!56(BTn^XafSZiIOOB5ZK\W1\"69`'VGk*t8g"nB7(?].80%R]T^V7A6k&BhIXP[@T!\!l8S^#[/^qX8p;soi>gG=K53r1KK&#<h3949BYZ242\f"$;rRV`-f3b<C,d$CK',>r_7JgQid\]=T;+a%EOWRMSh.ML2VTMA-:aD7<ITuWL\bqO87kJS?%!TUf%mK^]m67)fe[`ePh(=?/_ZFlO5X3m1#QdX=Jj3lmBDt`DW-[q]_#5%XY=s#%b\[#@L.:W%l1<GSo3;*<<;l'gY4Y8cKh0>Il3f?4X9$6NM\2X?grGYshNZ#:<dG-LRrgf7EOurp0mB.&nDf_HihraR(3ijL8;CUE%$k`%jS4+M[+.A+MlB7P`Y/$rTn2m^KB8K(DB!1u=?8%c]#=u^i[Y39V+-k!4\'-*4k*5Jk%mLf"%aU\=%U@Ce+UN=(-M@66=a'2t%1mN5.rR@>G.WjTf=PBaA'8p8]eO`<n1s>6kAos#'iSm1tOcXriPcAdU<&.B=._:>:$4\-j;ATk2j6,nL>Q=^':-Y&+C9g3e/3M+P%;Bf?!0$6_=W7\#j+*pj`k,+mGa@L12>]0:8'So+3UjO1rQi)[ZQus19-haA@k&_5lJkAT$a6KB8bES+BfAS6UH:pe7\V4'`F)U>o%5lb60g!e@(pKeml\ih`F=3c)D*=F+bFX*sTJmuI`;;!S3@^^9VI8/LEJ"/\E+-ck(<_GVk4%G_hU.jXNV_r7f-tl-#d`lpqoQU'I%Pn6f3ME`B*\<f#pJ)KR:+_QhnH_g=!1EEk2[MG'#(?=`V(*$=9`j(*IJ'QgU;hX@R=d!Y2;admjf5a2qlR8V9INJMAP=qdoR;.0Q%O>',Q?>tB[EZnBog^<s'cFKX+ZuCU2!Y/5Ka8js'Zk06.p7N)4LbM8DG(%Og_\>su>Q7Ed-_uPY>VI&ZTo(NWQ_Ic>.\co==$8nL%<R8e"dli?3gMfRs^m,Po$s.!>UpL*k>S/]YWOPG6R=I:<d74UHKX1ebJSsCd7>U#ef-B>a=!T0pNJf.WI><NiGcC9(O@;j;!r.HA%(ZGN;O=5O=.7++?-AIDI@>ZTn0,Cn"&k1l/m32@\.)L3`\BZdb,%J8[k_(<]?aHgr4HW!LJXhdOOU$tAeKtfH$LmtBO?OaZUsn^F%gQ#a"W6^<;'kQT%E=_4F"Ot<>6VAg]h_7L[;IHis`HAi\kXY>p0;]!W3q#ot)98&h1#)=8`t6GhLHe9Wj/^eIr0PKArD!=_heXX5%R_hD8Ohu@30[/`fTh6oPK1=GX7'`iUSan9^1e!3h3T\mYEQhRXl/lpbcVG/Q=4RA&.4%OBCpUTfB/E8%>pQ)/1[)GN&._G,+aC>G%fKLapHURLf/"oth`GJQLrk[I*pg4Zrm;&7\nmXu8<\h]@[F3%*("M.Tg2&?B9D9V]K&LWTjAQ&#9C\'TUUqfbSr,g3m'`<>DUC+b%PLA92e`0s@Fbq"0)'P1j[h4OhQ7bf9\-M<sB&G'n;70e49^]"%`p]LY-^I++g3cpSl>W$7o188*"e\S8Ac\eeJ:s4g:'jE.Ab`VQ%;glf?B4MUV3:FsI=fL9=p2&E-hQ.ad3%I`1,4/EgdtWYn,tNW!p<5TLDlM;PVnL[@PR@$6nZ$j\bC/51>ooEr=7"a6/N.r9\#nr"%'*t41^cnqj]gaMT14UDZ*Z\gMgr'hBe%XDIKr(?B.))49/ZCteUTAu1Eq;dJ7gJdQ*c3-%+IaZL_fEND-'g,4Ok=J4MTt[,Frt-s%#LQ%_j8J$6d-'WD5V;E"YeL=5($Pr)a$"71`J/Z?$>&:Ip!PF#1d_.E\tKG:@L7[%V.?,AYF/A.+]N"t$rQ'Pc,*4kp=H-0Fb[co%FD,.P4^sM*&s]sYbNK@?)&nQZ^jWjPqo0<ZL@7;DchlPIdngPNEtj7Cn[dreM'GT\]NbWLR3otX3:4)LJL@X(cG+s(:bgEnB'V$[%Tr`u-SZ2#"9W6\18L_Kd`0CmA;UWn6?"9iihkMQb>3N/dZM:Dbpr]%(>HWLoQA5;cMFGt*=l));a)3@pN]j,garAa$WD-C')]l4Y%f;4J"[SD$(WiD<H@OGFYEN*?8SrA-SH(L/H[tJNt6ain3;R`>gedW@L;hQ!m/Q>$[B8Z\R6u9O>T[>[V*,s+NGuj"uc$kHRE\f0c%gKBUiFZq<[)9Yua$>s5][9tF=WthKi6)LdCg@IJRO>L!SqjoRqNXj[1h(8HimnNHfa>hYX#"okBbtDcF^:q)9f\\73NY>CXr&jqB%/5n=?PM?4M2+]nD80.LEZ[5_3J'H(cD)(cePde#tV\@PC/CKP@N6Fu,D_r=B7#u.>m!Z=PQrS+'rC2@dq7Tl)\_(+RJcl2+l(io"%0eut8T&]pLC2q>Lj43'sM-h8=q;@$$,L++k"DO"8qVc_kc8R`;I&f:0/p6($Bfh]6U:kkRe>Npa:_S;DYUk4L'^+FjMg[Qm<R:$(%eoR1>j.<\JbI!LO,;hJT'h6!!=B"3`%*F"4V9em*;9qYB8DADe;TpAVBD$_J0uT37,ZZ[u+&\:&a@JW6[+uD@P6!A$qp)%N]ahQ<%LnA`J$bh4Rg7gH`DBA8,i-`e+Tc_i^\"Z4:G]AYBV67BtDZLn1cYh0FM"<$^(,1c-G,aiST'#`;m(*^3Sf]]N4]O=@A1e3FB,s`o%.@%*ePD_3bX>%"em8=*%h3cFP[1BSaW%g\G<P!:G3b7J>gi_%nNEY.<^"GSqP;Fb(FZkfg.;M5=a>U;&>1qo"idM"AW.-=S'"3cX%[FFUn/tb1%-Ps0j6]6+k&s>QaZgp,:fuo.MCrb"5=a*I@mBXDnhe+u$@$n,r%JkngSE%uHc[aX&;dt![qKqXD^OGPmKW'QD4(Uc4%TX)\u>.gsKSSe\pio2tYPL_5g>>5<Gb([5S4jWGN1h:%-%)$;^Iakn_g@sqBPAFo;#pZ%*B"+eq%R0^q:S75X_S&[\g/=hWL7bEL%ftN+qX'<^4PO5HPV<"j^<DFsAc?.6d$P'J3+ek=Va>ou^6"C1C<Il9*6ttH6Jd:_(Jt`F^%!ZD`Sq5Qi.?oI@j<"0Cp,_1Ee!AuT%q;<Ea8%G3X4ZMikqNcq<k%gdV-:R_(AF93#^%O:+,YCN@b<!r`=dh<m67tEn=e^BhBBA1ocdLsD\<>9n.SujW.naG_"hO6cCUT_r%mQ,OGE4qelork>tIIBbs0CTJ_3R3CD0.6_;Yin')iP!]Jfcp3:Lr7%-a&S^H>"ZH,n$]/l:?F5s1Us9OlRbq5dh&WfZE!0(VHVne%>4[op+Ws)eK[P:VR]*a%c?N))h4&^JL!VE6[uo`H*#2eqku?BFQ<JA(k1jIElS!4QnflL18R8tk<k.^bmqb9`4fQ3<m9Gp/i,G1I%7YNfV4=(4XFs<9Z$CK+O`oA2NHC=slnj/7D&NH.UMWX;f$DQ=NcYG*=2cp-K#stcD?6Uf3k-dgN@+pf:P1_seCtOA^)VBGp_Y2e]%E%WW>3%#SMTTB]@?jEFi5cTXpa!"&L*W"6-S&6.++Qm.lB,e-1n@K:1`K]OUH+ei=/1k?%MJ2Kh(&bnHR^"U+\YVb$%s(tZ5]0ee%g2%R?;9Y9!gJG@(>J^u?l8W<COqO-T$5`5p=0.qA9sk:DC7-,7-+LaT2EAu\c#I(FpI)>.1L>D_dmn6*d\Oq<<;<@c_(XP&/!uL!%36Vl>r#EZX:?@b@]Ih6.$G%ItEb$NWanaL#hZ_KEJOBQ`bo/=Yj)<1?=SBoiH2@!9CWhQ.*4d4,7'kcZfp-TUaoF7K@J,Q^ZP<in%M0Ur4;[ln<=$EG3j8";7qR&oRM(M7iZdkhEr_`RRpDf%8`Pqu'<46Q,*$[4H]VB=JM\I`Ol0_D._WfZ1j5B98[NF_3`h,]fp,un?%qs#r-nHg..0RJ5H:IXbDh!7O2Ej^hYaBePKV"&.pa+e0De-Eat<L61@o4]*o*@"O8R(W!="n8Hhd)*-DW(ONa3fLRQQ?nI9UKqZ5%6nZs<SWPA9(Y#K9orbRpChcgt@c1n7I/11DQ*dHBJGm[2B:\LlX%6;Z+K2Fu_m.h].D<G;0Y^fUQR_HV9Ia[BFkI<`I)S*f>Fit!%c339WcVVMb5TN?s93]`8XN5j7eR[Z\WAL?Ca6Pt36"0;&5ikf"/($_KgY!7pFZ=@5;Onu9O-c96_b"(o#E(qa2QYt]?Fe=&q)nfm%5K+Rs.+X%N&6X":lE+WP/#[Ph0+F1"=GHcJ\Jtu'6ci3/PoHOdU4kN?L8&<gB;V4-XX.#jlD90mQq(#,1)&ljG,e&4`2&S$I@@d5%RjF#d1:If)8#gqi5GtsUiNM?0.,G#b1sa*DVu_s_d)B^gEeK<6"uQFc?_EnRXG+6oP1b^WZXm/B(1#FrRrYTC%7HP<ekdn8f@QV]%;O>8]!K`tef2:4@ZKYj3JIj!*oo+WCm3sE/CHU.S`i"*``)Y<]s1UkJc1#',]\7[BWBY,RI`JncWg3;E`rK>`3ukBN7oP]0!$1\T%jFjb[!EH8Ok*RK#m4Q3+KMY35>NGISL2/iu[Yb^-:t#(<*sNMX9V!5i7+DC,&FqfEX&#YHW><5D?=iJ_oieZZ>DqudS$T5Y.mMOA%h9nK+[3St*oUbf_;TK=Yk"V^iHGPb9>'kM,V$p)/8P^VBFgM'_pdT1bq;(DJH5Zqhi#Q.'3l`YS?oqU1_<ZE5K#2UX`]e%l5tJCH%)pPn`F)(i)\i<f,o_(_P[YnuYfJE@!AOee(WMq>/h2]gS&X1KO.fVEokn12sTtPc%N\h+cM.UZ?jJ)3!=,6)V..`B+JfYk(Bj-nm%;B!5]MXq&#BQo]t30_UT"pAfKT"pmg,eg8bXM!+?[^2Ub2FeM9)t82;#?gn=b^0M`0\BS4q]iq&P+`F6h81Tqi`3e+7g1kZ><<4&%.0/,Ti?6%QXJ(nK`-4jI&h0l/cam<bGY'+&`IlK),!XAFGcITUM<1i?JWFP`1+V6L"Mo(n2;s?=36pG@l[7)i\C0]lMfU6N>f:Su%3XmqK$94Y\W$YZD@4ZbZAog2;*i1Ac<X1hOo,c_nZn&&m3rX`@DfZg*W;sfUQh*r5L&I=oHPHD%G8_Ju"<f%;iP1glLCO/_[Z)9U%_LG9C/aEN<:#!A(</"^plPb?)Jq%Xg2]qDns":J#l+Gt^q%;n2'`;aE6ed:Mn?6)`d;g@G'HG&bP![""5ctOPNW.X6V9-k.oJaJ?%k5@c!M(6smmRD[nS1F78d9eGZCDZiJ`GTELqQ"Iq<`S@%8=]sg"of4U<u\+Hrj@U8>acI+&jpBAQZ>Js[\W(-n?8t6UfS!"f3Ur2%cr]]i]o6RBcu/Up"D[3c<l)QA!Tsg.Kms8ZcD<bah^+97q@3JqWCS!Cr%#A,f(fXPg,`rUWFWi[gf.f<#5jB*+s/cAS&S,m/.D;T%m\jrV!WV_;LNWDOr6+P_M`K^&>Ib@6?gt8/T^:n^rlqM.q[NQ,9SR[Qn6['&$E7>+Y8ojo^cLsl]8q6t"95cU#CO&er[U2g]s@BZ%9'G1d!1;BS;r7!sSJG.W?1>&aZ"].^#p=oYEl5XcLU?msn?8HN[\V:-`?kuiGL0]dl:ThRkc_(l-i!SaTAX\HkU8K3A%ut%N]^1C%h[jg3]>7jrBJt(I_-\W'l+Io*=,'>cN!fN;mW=+FI)3R4JB;jNn1URT?/u1h.Nis'm>:jt#JV9<rl_'IM%0AAXE,!4$icK;0;3UJ%^N'nPj>cX9p]`Y!Hf2ZWWcjW@n6ZnQI>\4--$B_Zq?DJl6/*T+i4m\aS?W1r-([h8di8=P\e#3riP1&l8d8Pq0?@7/j>['R85Fg*%L&VeY02!J8DAa;boni^+%/;4QrrkRl(LZ19Q@7&tfIHe8Chg8;@,Se'!"B/1.k[Mjdgc>/T,E>hn?7ENF5UE0%1,`fqMT&jD+@am%YI1-5.2Vh2hDQJA'E&)S3VT8Y7m5Y]_#6`Pq;pss2u61tIW\JG@qJQD!.t1WM53B!L&UX$I"[(M15'B.1XKJ/8FQ5&rc0I*PC``0%k'_4OrDdQB?]HN1.rsnq%.mU)$]1;SrH1.nUqP/_-i:1(i%L;?_Q4.CPnP]'o`BX)W21/FJ\N`opP]LXIHO1@04:&RZ!ZF-=&t%b%Bn3s_9jAkiK"kDSfXen+D<e#5p<+/3-[:3WQ4M0a]tdu*F(MH`n<\EpLunm?b&i/hnj%^#[Gl9BqJ4&]W$"BU]@eci@kRE*3p9]`%0BfV'm;f?GqWis9.WV<!h'V"AI\XXj1:Et8kc[GKEhG&[QV4p=%JX"NKQVMArq1_r+!:9]Mh3[snD=c]=F()Lm6c'c!<D:)nI5R#%VUF98H3(g/:Yl$U!:1A'kVnN!I*,ptJcG<>B[L2^Y<5iXP:ldB0@crk_LGK*BBf>J!2oN"ltITX=9nm[!*J[R?7:("_#3!AQQ,td%B>Yc.pb-35l6e^`?YTgGkTB;t"cJ/>\):WY*;acX:\^8`9.aVh^XhSQ(L6HJ+(p94r/8g?gO]?I$I4rY\^4]A.[QnniEsSVhQ--Q%L+O\KJcGRV[K+#2hsU#ATqUDZh1jeKBF=cN7!BiO#QEI0\6"upn6ZArkjAM&qiG*1!5Q;h@tOd^94dZV4TODahF&0tCkMuf5_-*W%nluI)(ZQeU!3BP3;8`V<]4AP8^'+MCY2jY0!3du=-Dh:RfOB!:ec:62Gh2HdJAWZ72n]6"h%$/l(BEfR7PUqD?n:b]!qlVEV+JqE%l2^m+D4,2V!:8LY1YrDA%gQ3Y+i(YnDgNVB^$6ga!3joXB0H<'gurMt[i5>8"&F=F^jR+I_?0d]h^-L]!+8r4d"WVB0LGmhqSIa<%)Gm]Kn6b!*rJ_ooDc[p>lLBH*Eo5Oq#6([m&GuA-s4,qC`sr(>_D?*7r9F_\GNf/.8kMG&qLX4qP\g-Q^Gn\q`rl@lPPPCa!"Qtt%l5'H%e+=/0!0"7R3>Yp#0[@QVrrR^V^@QOK?rh3e=T\Zl6UgDEJ6@UB2r=<_CGik-pi"7O>\E!0\<E0BhtXB=Y5>38J,PsDn:CW)%X>dE@$iea7]-@a^[i><ba,U+>9BcS#j1i/>bL-Xpl_(b"#QCdB!U%<=s0_(EhDYQ:eYdDk]^XhQm_geN/8X.6pb+N-p^@+-m'(T=%)umlSV('lQs5Ms!,@(!sDD:.?_LM6'?mlQ`fCL$PfRSI^:0K1Qs.sOT?^LA@s$hpjG&N*7/pf2I$i`*@K5H"R^PfWVLbf57W`9.g%Geq."a4Km4IoUlI`-oJ:.KCU$G/:pC3RAK/7Xk_kh!-Qb(\FH^)DC`LGXAD+#Pq*GZ_2quTt^_'2R4:cY<iHXI!hX&MAbb>qTI3o%BsceU7,(>1idq(AWp"=*qFfaT[JbgY.^7E=,C?-!hKO:!(](b2MZihqkjKg8nUQ+7"4\H7\H=RUN*l(X!O!1$L49Z(gX^<<f=7@(%H,77ejuLOIi89@HnY-6cX6-*?[gbbLW:p17TYF+bac.8'0>U$PN"5J=;L:ap(]"Mf?\n)9J("X3ST"/PGR>AY"9+9jU@<Wj^QRb?%DdE.A6AOJX&,_c0mAS<9pogLfn-TR'ja3.t*r%BipG@-R^[?:-70<Lhq?JtS!WO)53=c>lbB5d2?0La(J+?n;pPB"P(e-sH'K18;%=Qj?q/FJ:ZB,6uRp>rO//iH-LU21X86<go[0rG3&2$LRg'V!h1rkYI&cYOcY@T.e"7M'[G.3=e59n=mJ0S<).RpTaj#+acPP>QuB%`:@rDbEG][Jst$aVGdJ("[X&J$7lP?4QmK.b1/E6'^EodKhtu*DA.o@!4(T_/6/.KH<QpE-3eHV35b$jMb2li?3-_8Ueh1\D;i=,%GlLl.XCmN0Bhp44_Bi'\/1QA:?$255PlaV:j-rZ':T`eKV(c!e7NPM9[;F>)je>YWBBGRCW"auUEp![I_@Y$o@Q0Rh"3==O=X_a0%#c@3*;S7K?T,GL"lK/U,"W+M3gI7r8o]F8k:csPQj2%P4LFi!5%)@.M&dOVP3&0CGc(lIYoT+Vr+mE;*T>@>=U)*BR8O3n)B)>t6%oV%\$0e(sDSWio?"6;\6'RCjkf3hLT4?II?OTL0!mj:s-)3/;FO[=%b(;NA7^`@c:HOqWrj_];T.6nI=FhW)78h>:s\9Sd_N6"O(%O!5Tagfq[kGlM%+j\bs8n%SSMci<>-c[Ytas8@kZ^A[0Fs8Lo*n["kd\$(8RbQ%,*=24a$?[hsmYC?5r2o#:]X5EgZG1nVLp%9tF%rp&fVrpKNqrVDjfrpKgap><*e^+qnOZ_.3p5Q'[trZ=(sJ5u~>%AI9_PrivateDataEnd